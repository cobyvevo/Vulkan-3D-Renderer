{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Ex",
				"Extent2D"
			],
			[
				"Pip",
				"PipelineLayout"
			],
			[
				"MAineng",
				"MainEnginePipelineInfo"
			],
			[
				"MainEn",
				"MainEnginePipelineInfo"
			],
			[
				"Smile",
				"SmileTexture2"
			],
			[
				"materia",
				"material_name"
			],
			[
				"Descriptorsetlay",
				"DescriptorSetLayout"
			],
			[
				"textu",
				"texture_height"
			],
			[
				"Pipelinsta",
				"PipelineStageFlagBits"
			],
			[
				"ATtac",
				"AttachmentDescription"
			],
			[
				"Windo",
				"WindowResizedCallback"
			],
			[
				"descro",
				"DescriptorType"
			],
			[
				"Mesh",
				"MeshVertex"
			],
			[
				"swap",
				"swapchainExtent"
			],
			[
				"swapchainIma",
				"swapchainImageViews"
			],
			[
				"eColorA",
				"eColorAttachment"
			],
			[
				"surfac",
				"surfaceFormat"
			],
			[
				"swapchain",
				"swapchainDetails"
			],
			[
				"Surface",
				"SurfaceCapabilitiesKHR"
			],
			[
				"Alloca",
				"AllocatedImage"
			],
			[
				"eTransf",
				"eTransferDst"
			],
			[
				"All",
				"AllocatedImage"
			],
			[
				"VMA_MEMO",
				"VMA_MEMORY_USAGE_GPU_ONLY"
			],
			[
				"Everte",
				"eVertexBuffer"
			],
			[
				"COmmandpoolcr",
				"CommandPoolCreateInfo"
			],
			[
				"SHader",
				"ShaderStageFlagBits"
			],
			[
				"descriptorset",
				"DescriptorSetLayoutCreateInfo"
			],
			[
				"Descriptor",
				"DescriptorSetLayoutBinding"
			],
			[
				"DescriptorSetLayout",
				"createDescriptorSetLayout"
			],
			[
				"Allocad",
				"AllocatedBuffer"
			],
			[
				"Pipelin",
				"PipelineLayout"
			],
			[
				"EXt",
				"Extent2D"
			],
			[
				"IMag",
				"ImageView"
			],
			[
				"mesh",
				"MeshPushConstants"
			],
			[
				"VmaALl",
				"VmaAllocation"
			],
			[
				"frames",
				"flightFrames"
			],
			[
				"PipelineSTageflag",
				"PipelineStageFlagBits"
			],
			[
				"uint",
				"UINT64_MAX"
			],
			[
				"FRamebuffe",
				"FramebufferCreateInfo"
			],
			[
				"swapchai",
				"swapChainImageViews"
			],
			[
				"vertsha",
				"vertexshader"
			],
			[
				"basepIp",
				"basePipelineIndex"
			],
			[
				"basePIpe",
				"basePipelineHandle"
			],
			[
				"renderpasscre",
				"renderpassCreateinfo"
			],
			[
				"graphiss",
				"graphicsSubpassDependency"
			],
			[
				"REnderpasscreat",
				"RenderPassCreateInfo"
			],
			[
				"eCOloratt",
				"eColorAttachmentWrite"
			],
			[
				"SubpassDe",
				"SubpassDescription"
			],
			[
				"eColorAtt",
				"eColorAttachmentOptimal"
			],
			[
				"COmp",
				"CompositeAlphaFlagBitsKHR"
			],
			[
				"ppEnabled",
				"ppEnabledExtensionNames"
			],
			[
				"DEvice",
				"DeviceQueueCreateInfo"
			],
			[
				"req",
				"required_extentions"
			],
			[
				"exte",
				"extentionName"
			],
			[
				"glfwCreatewid",
				"glfwCreateWindowSurface"
			],
			[
				"debugMEs",
				"debugMessenger"
			],
			[
				"DebugUtilsMesseng",
				"DebugUtilsMessengerCreateInfoEXT"
			],
			[
				"DebugUtilsMesse",
				"DebugUtilsMessageSeverityFlagsEXT"
			],
			[
				"glfwext",
				"glfwExts"
			],
			[
				"glfwex",
				"glfwExts"
			],
			[
				"VERTE",
				"vertexbuffer"
			],
			[
				"sub",
				"submitinfo"
			],
			[
				"copyb",
				"copyBufferRegion"
			],
			[
				"verte",
				"vertexbuffermemory"
			],
			[
				"vertexbuff",
				"vertexbuffermemory"
			],
			[
				"graph",
				"graphicsFamily"
			],
			[
				"framebuff",
				"framebufferResizeCallback"
			],
			[
				"max",
				"MAX_FRAMES_IN_FLIGHT"
			],
			[
				"CommanD",
				"CommandBuffer"
			],
			[
				"coloratt",
				"colorAttachment"
			],
			[
				"pQueue",
				"pQueueFamilyIndices"
			],
			[
				"vali",
				"enableValidationLayers"
			],
			[
				"allqueue",
				"allQueueInfos"
			],
			[
				"avail",
				"availableformat"
			],
			[
				"checkdevi",
				"checkDeviceSupportsExtentions"
			],
			[
				"debugmess",
				"debugmessenger"
			],
			[
				"ext",
				"extentionCount"
			],
			[
				"glf",
				"glfwExtensions"
			],
			[
				"glfwwin",
				"GLFWwindow"
			],
			[
				"waitSemaphore",
				"waitSemaphoreCount"
			],
			[
				"render",
				"renderFinishedSemaphore"
			],
			[
				"image",
				"imageAvailableSemaphore"
			],
			[
				"VKcOMMAN",
				"VkCommandBuffer"
			],
			[
				"attach",
				"attachmentCount"
			],
			[
				"dynamic",
				"dynamicStates"
			],
			[
				"piee",
				"pipelineInfo"
			],
			[
				"shader",
				"shaderStages"
			],
			[
				"color",
				"colorAttachmentRef"
			],
			[
				"colorbl",
				"colorBlendAttachment"
			],
			[
				"fragshad",
				"fragShaderStageInfo"
			],
			[
				"swapChainimag",
				"swapChainImages"
			],
			[
				"d",
				"do"
			],
			[
				"r",
				"vector"
			],
			[
				"swapchaine",
				"swapChainImages"
			],
			[
				"queuefamil",
				"queueFamilyIndexCount"
			],
			[
				"queuefamilyind",
				"QueueFamilyIndices"
			],
			[
				"surf",
				"surfaceFormat"
			],
			[
				"choose",
				"chooseSwapPresentMode"
			],
			[
				"vksur",
				"VkSurfaceFormatKHR"
			],
			[
				"available",
				"availablePresentMode"
			],
			[
				"avali",
				"availableFormat"
			],
			[
				"exten",
				"extensionsSupported"
			],
			[
				"vkGETPHYS",
				"vkGetPhysicalDeviceSurfaceSupportKHR"
			],
			[
				"presen",
				"presentQueue"
			],
			[
				"queuecrea",
				"queueCreateInfos"
			],
			[
				"queuecre",
				"queueCreateInfos"
			],
			[
				"prese",
				"presentFamily"
			],
			[
				"graphi",
				"graphicsQueue"
			],
			[
				"ena",
				"enabledLayerCount"
			],
			[
				"ppenabl",
				"ppEnabledLayerNames"
			],
			[
				"vk_Struct",
				"VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"
			],
			[
				"queuefami",
				"QueueFamilyIndices"
			],
			[
				"quefam",
				"queueFAmilies"
			],
			[
				"vkGEt",
				"vkGetPhysicalDeviceQueueFamilyProperties"
			],
			[
				"vkEnum",
				"vkEnumeratePhysicalDevices"
			],
			[
				"Create",
				"CreateDebugUtilsMessengerEXT"
			],
			[
				"valid",
				"validationext"
			],
			[
				"ppen",
				"ppEnabledExtensionNames"
			],
			[
				"glfwEXten",
				"glfwExtentionCount"
			],
			[
				"glfwEx",
				"glfwExtentionCount"
			],
			[
				"backgro",
				"background-color\tproperty"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\nCreateRenderpass = creates renderpass_shadow\nInitShadowmap = creates framebuffer, needs renderpass_shadow\nCreateShadowmap = creates shadow pipeline, does not need much\n",
			"settings":
			{
				"buffer_size": 169,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAADQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8AAAAAAAAAEAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "creates"
					},
					"BwAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " framebuffer,"
					},
					"DQAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAJAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " needs"
					},
					"BgAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACoAAAAAAAAAKwAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoAAAAAAAAAKgAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "renderpass_shadow"
					},
					"EQAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsAAAAAAAAAKwAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADwAAAAAAAAAPQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwAAAAAAAAAPAAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAD0AAAAAAAAATAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0AAAAAAAAAPQAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAEwAAAAAAAAATQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE0AAAAAAAAATgAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0AAAAAAAAATQAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					2,
					"left_delete",
					null,
					"AgAAAE0AAAAAAAAATQAAAAAAAAABAAAAIEwAAAAAAAAATAAAAAAAAAABAAAALQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4AAAAAAAAATgAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " creates"
					},
					"CAAAAE4AAAAAAAAATwAAAAAAAAAAAAAATwAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4AAAAAAAAATgAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " shadow"
					},
					"BwAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYAAAAAAAAAVgAAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " pipeline,"
					},
					"CgAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAABfAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAABiAAAAAAAAAGMAAAAAAAAAAAAAAGMAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABlAAAAAAAAAAAAAABlAAAAAAAAAGYAAAAAAAAAAAAAAGYAAAAAAAAAZwAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0AAAAAAAAAXQAAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcAAAAAAAAAZwAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAGgAAAAAAAAAaAAAAAAAAAABAAAAbg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkAAAAAAAAAaQAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "no"
					},
					"AgAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					2,
					"left_delete",
					null,
					"AgAAAGkAAAAAAAAAaQAAAAAAAAABAAAAb2gAAAAAAAAAaAAAAAAAAAABAAAAbg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoAAAAAAAAAagAAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "does"
					},
					"BAAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAABqAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAG8AAAAAAAAAcAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " ened"
					},
					"BQAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAByAAAAAAAAAHMAAAAAAAAAAAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHUAAAAAAAAAdgAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUAAAAAAAAAdQAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					4,
					"left_delete",
					null,
					"BAAAAHUAAAAAAAAAdQAAAAAAAAABAAAAIHQAAAAAAAAAdAAAAAAAAAABAAAAZHMAAAAAAAAAcwAAAAAAAAABAAAAZXIAAAAAAAAAcgAAAAAAAAABAAAAbg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYAAAAAAAAAdgAAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "ne"
					},
					"AgAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIAAAAAAAAAcgAAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					3,
					"left_delete",
					null,
					"AwAAAHMAAAAAAAAAcwAAAAAAAAABAAAAZXIAAAAAAAAAcgAAAAAAAAABAAAAbnEAAAAAAAAAcQAAAAAAAAABAAAAZQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "need"
					},
					"BAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEAAAAAAAAAcQAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " much"
					},
					"BQAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUAAAAAAAAAdQAAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHoAAAAAAAAAewAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoAAAAAAAAAegAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAAHsAAAAAAAAAiwAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsAAAAAAAAAewAAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsAAAAAAAAAiwAAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " creates"
					},
					"CAAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0AAAAAAAAAjQAAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " renderpass_sha"
					},
					"DwAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAJ4AAAAAAAAAAAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAAKQAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUAAAAAAAAAlQAAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "dow"
					},
					"AwAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACmAAAAAAAAAAAAAACmAAAAAAAAAKcAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"",
					null,
					"AgAAAAEAAAAAAAAALQAAAAAAAAAAAAAAqQAAAAAAAACpAAAAAAAAACwAAABDcmVhdGVSZW5kZXJwYXNzID0gY3JlYXRlcyByZW5kZXJwYXNzX3NoYWRvdw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkAAAAAAAAAfQAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "#define VMA_IMPLEMENTATION\n#define STB_IMAGE_IMPLEMENTATION\n\n#include <vk_mem_alloc.h>\n#include <stb_image.h>\n#include \"engine.hpp\"\n#include \"meshtools.hpp\"\n\nstatic std::vector<char> readFile(const std::string& filename) {\n    std::ifstream file(filename, std::ios::ate | std::ios::binary);\n\n    if (!file.is_open()) {\n        throw std::runtime_error(\"file didnt open you mongoloid\");\n    }\n\n    size_t fileSize = (size_t) file.tellg();\n    std::vector<char> buffer(fileSize);\n\n    file.seekg(0);\n    file.read(buffer.data(),fileSize);\n\n    file.close();\n\n    return buffer;\n}\n\nsize_t pad_uniform_buffer_size(size_t original, size_t minUboAlignment) {\n\tif (minUboAlignment > 0) {\n\t\treturn (original + minUboAlignment - 1) & ~(minUboAlignment - 1);\n\t}\n\treturn original;\n}//vkguide.dev\n\nvk::ShaderModule setupShader(const std::vector<char>& shader, vk::Device& gpudevice) {\n\tvk::ShaderModuleCreateInfo createinfo(\n\t\t{},\n\t\tshader.size(),\n\t\treinterpret_cast<const uint32_t*>(shader.data())\n\t);\n\n\tvk::ShaderModule module = gpudevice.createShaderModule(createinfo);\n\n\treturn module;\n}\n\nbool Mesh::Load(const char* path) {\n\tMeshTools::MeshData loading_mesh;\n\tloading_mesh.load_from_file(path);\n\n\tvertices.resize(loading_mesh.indices.size());\n\tint count = 0;\n\tfor (int index : loading_mesh.indices) {\n\t\tMeshTools::MeshVertex* lm_v = &loading_mesh.vertices[index];\n\n\t\tvertices[count].pos = {lm_v->pos[0],lm_v->pos[1],lm_v->pos[2]};\n\t\tvertices[count].uv = {lm_v->uv[0],1-lm_v->uv[1]};\n\t\tvertices[count].norm = {lm_v->norm[0],lm_v->norm[1],lm_v->norm[2]};\n\n\t\tstd::cout << lm_v->pos[0] << \", \" << lm_v->pos[1] << \", \" << lm_v->pos[2] << std::endl;\n\t\tcount++;\n\t}\n\treturn true;\n}\n\nvoid Material::Setup(const char* texture_path) {\n\t//texture loading for future\n}\n\nvoid Object::Setup(const char* mesh_path) {\n\t//mesh loading for future\n}\n\n//TODO: refactor code so all the object stuff is in another script\n\nvoid Object::SetPosition(glm::vec3 pos) {\n\ttransform = glm::translate(glm::mat4(1.f), pos);\n}\n\nvoid Object::Scale(glm::vec3 scale) {\n\ttransform = glm::scale(transform,scale);\n}\n\nvoid Object::SetRotation() {\n\t\n}\n\nvoid MainEngine::SCENE_new_material(Scene* sc,const char* texture_path, std::string name) { //well, this sucks\n\n\tauto find_mat = sc->materials.find(name);\n\tif (find_mat == sc->materials.end()) {\n\t\tMaterial newmaterial;\t\n\t\tnewmaterial.tex.image = load_texture_file(texture_path);\n\t\tcreate_texture(&newmaterial.tex);\n\t\tnewmaterial.gpupipeline = graphicsPipeline_textured;\n\t\tsc->materials[name] = newmaterial;\n\t}\n\n}\n\nObject* MainEngine::SCENE_new_object(Scene* sc,std::string mesh_path, std::string name, std::string material_name) {\n\tObject* newobject = new Object;\n\tnewobject->name = name;\n\tnewobject->transform = glm::translate(glm::mat4(1.f), glm::vec3(0.0f,0.0f,0.0f));\n\tnewobject->colour = glm::vec4(1.0f,0.0f,0.0f,1.0f);\n\n\tconst char* meshpath = mesh_path.c_str();\n\t//mesh\n\tif (mesh_path != \"none\") {\n\t\tauto find_mesh = sc->meshes.find(name);\n\n\t\tif (find_mesh == sc->meshes.end()) {\n\t\t\t//couldnt be found, make new mesh\n\t\t\n\t\t\tMesh newmesh;\n\t\t\tnewmesh.Load(meshpath);\n\t\t\tupload_mesh(&newmesh);\n\n\t\t\tsc->meshes[name] = newmesh;\n\t\t\tnewobject->mesh = &sc->meshes[name];\n\n\t\t} else {\n\t\t\t//set mesh to already existing\n\t\t\tnewobject->mesh = &(*find_mesh).second;\n\t\t}\n\t} else {\n\t\tnewobject->mesh = nullptr;\n\t}\n\n\t//mat\n\tauto find_mat = sc->materials.find(material_name);\n\tif (find_mat == sc->materials.end()) {\n\t\t//could not be found\n\t\tstd::cout << \"could not find material for object\" << std::endl;\n\t\tnewobject->material = nullptr;\n\t} else {\n\t\tnewobject->material = &(*find_mat).second;\n\t}\n\tsc->objects.push_back(newobject);\n\n\t/*\n\tyou have NO IDEA the hours of pain i just went though. turns out, a pointer to an object within\n\ta vector is prone to completely crashing your program at random times, and ive spend about 4 hours \n\ttrying to figure this out. the worst part is that i saw quite a few people recommend doing this, so i didnt\n\teven think that this wouldve been a problem.\n\t*/\n\n\treturn newobject;\n}\n\nObject Scene::New_Object(const char* meshpath, std::string name, std::string material_name) { //UNUSED\n\tObject newobject;\n\t//mesh\n\tauto find_mesh = meshes.find(name);\n\n\tif (find_mesh == meshes.end()) {\n\t\t//couldnt be found, make new mesh\n\t\n\t\tMesh newmesh;\n\t\tnewmesh.Load(meshpath);\n\n\t\t//upload_mesh(newmesh); NEEDS MAIN ENGINE CONNECTION\n\n\t\tmeshes[name] = newmesh;\n\t\tnewobject.mesh = &meshes[name];\n\n\t} else {\n\t\t//set mesh to already existing\n\t\tnewobject.mesh = &(*find_mesh).second;\n\t}\n\n\t//mat\n\tauto find_mat = materials.find(material_name);\n\tif (find_mat == materials.end()) {\n\t\t//could not be found\n\t\tstd::cout << \"could not find material for object\" << std::endl;\n\t} else {\n\t\tnewobject.material = &(*find_mat).second;\n\t}\n\n\treturn newobject;\n}\n\nvoid VertInputStateDesc::GetDefaultState() {\n\tvk::VertexInputBindingDescription mainBinding{};\n\tmainBinding.binding = 0;\n\tmainBinding.stride = sizeof(Vertex);\n\tmainBinding.inputRate = vk::VertexInputRate::eVertex;\n\n\tvk::VertexInputAttributeDescription posAtt{};\n\tposAtt.binding = 0;\n\tposAtt.location = 0;\n\tposAtt.format = vk::Format::eR32G32B32Sfloat;\n\tposAtt.offset = offsetof(Vertex,pos);\n\n\tvk::VertexInputAttributeDescription uvAtt{};\n\tuvAtt.binding = 0;\n\tuvAtt.location = 1;\n\tuvAtt.format = vk::Format::eR32G32Sfloat;\n\tuvAtt.offset = offsetof(Vertex,uv);\n\n\tvk::VertexInputAttributeDescription normAtt{};\n\tnormAtt.binding = 0;\n\tnormAtt.location = 2;\n\tnormAtt.format = vk::Format::eR32G32B32Sfloat;\n\tnormAtt.offset = offsetof(Vertex,norm);\n\n\tbindings.push_back(mainBinding);\n\tattributes.push_back(posAtt);\n\tattributes.push_back(uvAtt);\n\tattributes.push_back(normAtt);\n}\n\nAllocatedBuffer MainEngine::create_allocated_buffer(size_t allocSize, vk::Flags<vk::BufferUsageFlagBits> usageBits, VmaMemoryUsage memoryUsageFlag) {\n\tvk::BufferCreateInfo bufferinfo{};\n\tbufferinfo.size = allocSize;\n\tbufferinfo.usage = usageBits;\n\n\tVmaAllocationCreateInfo allocationinfo{};\n\tallocationinfo.usage = memoryUsageFlag;\n\n\tAllocatedBuffer newbuffer;\n\n\tif (vmaCreateBuffer(\n\t\tvallocator,\n\t\treinterpret_cast<VkBufferCreateInfo*>(&bufferinfo),\n\t\t&allocationinfo,\n\t\treinterpret_cast<VkBuffer*>(&newbuffer.buffer),\n\t\t&newbuffer.allocation,\n\t\tnullptr\n\t\t) != VK_SUCCESS) {\n\t\tthrow std::runtime_error(\"buffer failed to be allocated\");\n\t}\n\n\treturn newbuffer;\n}\n\nvoid MainEngine::destroy_allocated_buffer(AllocatedBuffer* abuffer) {\n\tvmaDestroyBuffer(vallocator, abuffer->buffer, abuffer->allocation);\n}\n\nAllocatedImage MainEngine::create_allocated_image(vk::Format format, vk::Flags<vk::ImageUsageFlagBits> imageusage, vk::Extent3D extent, VmaMemoryUsage memoryUsageFlag, bool create_an_imageview, vk::ImageAspectFlagBits imageaspect = vk::ImageAspectFlagBits::eDepth) {\n\n\tvk::ImageCreateInfo image{};\n\timage.imageType = vk::ImageType::e2D;\n\timage.format = format;\n\timage.extent = extent;\n\timage.mipLevels = 1;\n\timage.arrayLayers = 1;\n\timage.samples = vk::SampleCountFlagBits::e1;\n\timage.tiling = vk::ImageTiling::eOptimal;\n\timage.usage = imageusage;\n\n\tVmaAllocationCreateInfo allocationinfo{};\n\tallocationinfo.usage = memoryUsageFlag;\n\tallocationinfo.requiredFlags = VkMemoryPropertyFlags(VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);\n\n\tAllocatedImage newallocimage;\n\n\tif (vmaCreateImage(\n\t\tvallocator, \n\t\treinterpret_cast<VkImageCreateInfo*>(&image), \n\t\t&allocationinfo,\n\t\treinterpret_cast<VkImage*>(&newallocimage.image),\n\t\t&newallocimage.allocation,\n\t\tnullptr\n\t\t) != VK_SUCCESS) {\n\t\tthrow std::runtime_error(\"image failed to be allocated\");\n\t}\n\n\tif (create_an_imageview == true) {\n\t\tnewallocimage.ImageViewExists = true;\n\t\tvk::ImageViewCreateInfo imgview{};\n\n\t\timgview.image = newallocimage.image;\n\t\timgview.viewType = vk::ImageViewType::e2D;\n\t\timgview.format = format;\n\n\t\timgview.subresourceRange.aspectMask = imageaspect; //vk::ImageAspectFlagBits::eColor;\n\t\timgview.subresourceRange.baseMipLevel = 0;\n\t\timgview.subresourceRange.levelCount = 1;\n\t\timgview.subresourceRange.baseArrayLayer = 0;\n\t\timgview.subresourceRange.layerCount = 1;\t\n\n\t\tnewallocimage.imageview = core->gpudevice.createImageView(imgview);\n\t}\n\n\treturn newallocimage;\n\n}\n\nvoid MainEngine::destroy_allocated_image(AllocatedImage* aimage) {\n\tif (aimage->ImageViewExists==true) {\n\t\tcore->gpudevice.destroyImageView(aimage->imageview,nullptr);\n\t}\n\tvmaDestroyImage(vallocator, static_cast<VkImage>(aimage->image), aimage->allocation);\n}\n\n//SHADOWMAP TODO\n/*\n\nDescriptoSet bindings point towards buffers/images that are in memory, so\n\nAlong with the camera UBO, pass along the shadowmap image sampler on binding 2:\n\nFirst render the shadowmap\nNext, barrier the shadowmap so that its eShaderReadOnlyOptimal\nIt should in theory be readable through the descriptor set\n\nok update, everything works but the actual image is layout type of undefined, may be a sync issue\ntrying to set sync with the subpass dependencies but cant wrap my head around it\n\n*/\n\nAllocatedImage MainEngine::load_texture_file(const char* file) {\n\n\tint texture_width, texture_height, texture_channels;\n\n\tstbi_uc* pixels = stbi_load(file, &texture_width, &texture_height, &texture_channels, STBI_rgb_alpha);\n\tif (!pixels) {\n\t\tstd::cout << \"image failed to be loaded in\" << std::endl;\t\n\t\t//make a default missing texture and then return it here\n\t}\n\n\tvk::DeviceSize texturesize = texture_width * texture_height * 4;\n\tvk::Format textureformat = vk::Format::eR8G8B8A8Srgb;\n\n\tAllocatedBuffer stagingbuffer = create_allocated_buffer(\n\t\ttexturesize,\n\t\tvk::BufferUsageFlagBits::eTransferSrc,\n\t\tVMA_MEMORY_USAGE_CPU_ONLY\n\t);\n\n\tvoid* data;\n\tvoid* pixelvoid = pixels;\n\tvmaMapMemory(vallocator,stagingbuffer.allocation,&data);\n\tmemcpy(data, pixelvoid, static_cast<size_t>(texturesize));\n\tvmaUnmapMemory(vallocator,stagingbuffer.allocation);\n\n\tstbi_image_free(pixels);\n\n\tvk::Extent3D textureExtent;\n\ttextureExtent.width = static_cast<uint32_t>(texture_width);\n\ttextureExtent.height = static_cast<uint32_t>(texture_height);\n\ttextureExtent.depth = 1;\n\n\tAllocatedImage newtexture = create_allocated_image(\n\t\ttextureformat, \n\t\tvk::ImageUsageFlagBits::eSampled | vk::ImageUsageFlagBits::eTransferDst, \n\t\ttextureExtent, \n\t\tVMA_MEMORY_USAGE_GPU_ONLY, \n\t\ttrue,\n\t\tvk::ImageAspectFlagBits::eColor\n\t);\n\n\trun_gpu_instruction([=](vk::CommandBuffer cmd) {\n\t\t\n\t\tvk::ImageSubresourceRange range;\n\t\trange.aspectMask = vk::ImageAspectFlagBits::eColor;\n\t\trange.baseMipLevel = 0;\n\t\trange.levelCount = 1;\n\t\trange.baseArrayLayer = 0;\n\t\trange.layerCount = 1;\n\n\t\tvk::ImageMemoryBarrier transfer_barrier{};\n\t\ttransfer_barrier.oldLayout = vk::ImageLayout::eUndefined;\n\t\ttransfer_barrier.newLayout = vk::ImageLayout::eTransferDstOptimal;\n\t\ttransfer_barrier.image = newtexture.image;\n\t\ttransfer_barrier.subresourceRange = range;\n\t\ttransfer_barrier.dstAccessMask = vk::AccessFlagBits::eTransferWrite;\n\n\t\tcmd.pipelineBarrier(\n\t\t\tvk::PipelineStageFlagBits::eTopOfPipe,\n\t\t\tvk::PipelineStageFlagBits::eTransfer,\n\t\t\t{},\n\t\t\t0,\n\t\t\tnullptr,\n\t\t\t0,\n\t\t\tnullptr,\n\t\t\t1,\n\t\t\t&transfer_barrier\n\t\t);\n\n\t\tvk::BufferImageCopy imagebuffer_copy{};\n\t\timagebuffer_copy.bufferOffset = 0;\n\t\timagebuffer_copy.bufferRowLength = 0;\n\t\timagebuffer_copy.bufferImageHeight = 0;\n\t\timagebuffer_copy.imageSubresource.aspectMask = vk::ImageAspectFlagBits::eColor;\n\t\timagebuffer_copy.imageSubresource.mipLevel = 0;\n\t\timagebuffer_copy.imageSubresource.baseArrayLayer = 0;\n\t\timagebuffer_copy.imageSubresource.layerCount = 1;\n\t\timagebuffer_copy.imageExtent = textureExtent;\n\n\t\tcmd.copyBufferToImage(stagingbuffer.buffer, newtexture.image, vk::ImageLayout::eTransferDstOptimal, 1, &imagebuffer_copy);\n\n\t\tvk::ImageMemoryBarrier transfer_barrier_readable{};\n\t\ttransfer_barrier_readable.oldLayout = vk::ImageLayout::eTransferDstOptimal;\n\t\ttransfer_barrier_readable.newLayout = vk::ImageLayout::eShaderReadOnlyOptimal;\n\t\ttransfer_barrier_readable.image = newtexture.image;\n\t\ttransfer_barrier_readable.subresourceRange = range;\n\t\ttransfer_barrier_readable.srcAccessMask = vk::AccessFlagBits::eTransferWrite;\n\t\ttransfer_barrier_readable.dstAccessMask = vk::AccessFlagBits::eShaderRead;\n\n\t\tcmd.pipelineBarrier(\n\t\t\tvk::PipelineStageFlagBits::eTransfer,\n\t\t\tvk::PipelineStageFlagBits::eFragmentShader,\n\t\t\t{},\n\t\t\t0,\n\t\t\tnullptr,\n\t\t\t0,\n\t\t\tnullptr,\n\t\t\t1,\n\t\t\t&transfer_barrier_readable\n\t\t);\n\n\t});\n\t\n\tdestroy_allocated_buffer(&stagingbuffer);\n\n\treturn newtexture;\n}\n\nTexture MainEngine::create_texture_from_allimage(AllocatedImage* target) // NOW UNUSED, REMOVE LATER\n\tTexture tex;\n\n\tvk::DescriptorSetAllocateInfo allocinfo{};\n\tallocinfo.descriptorPool = descriptorPool;\n\tallocinfo.descriptorSetCount = 1;\n\tallocinfo.pSetLayouts = &descriptorSetLayout_texture; //image sampler layout\n\ttex.descriptor = core->gpudevice.allocateDescriptorSets(allocinfo).front();\n\n\tvk::SamplerCreateInfo sampler{};\n\tsampler.magFilter = vk::Filter::eNearest;\n\tsampler.minFilter = vk::Filter::eNearest;\n\t//sampler.addressModeU = vk::SamplerAddressMode::eRepeat;\n\t//sampler.addressModeV = vk::SamplerAddressMode::eRepeat;\t\n\t//sampler.addressModeW = vk::SamplerAddressMode::eRepeat;\n\n\ttex.sampler = core->gpudevice.createSampler(sampler);\n\n\tvk::DescriptorImageInfo imageInfo{};\n\timageInfo.sampler = tex.sampler;\n\timageInfo.imageView = target->imageview;\n\timageInfo.imageLayout = vk::ImageLayout::eShaderReadOnlyOptimal;\n\n\tvk::WriteDescriptorSet write{};\n\twrite.dstBinding = 0;\n\twrite.descriptorCount = 1;\n\twrite.dstSet = tex.descriptor;\n\twrite.descriptorType = vk::DescriptorType::eCombinedImageSampler;\n\twrite.pImageInfo = &imageInfo;\n\n\tcore->gpudevice.updateDescriptorSets(1,&write,0,nullptr);\n\n\treturn tex;\n}\n\nvoid MainEngine::create_texture(Texture* tex) {\n\tvk::DescriptorSetAllocateInfo allocinfo{};\n\tallocinfo.descriptorPool = descriptorPool;\n\tallocinfo.descriptorSetCount = 1;\n\tallocinfo.pSetLayouts = &descriptorSetLayout_texture; //image sampler layout\n\ttex->descriptor = core->gpudevice.allocateDescriptorSets(allocinfo).front();\n\n\tvk::SamplerCreateInfo sampler{};\n\tsampler.magFilter = vk::Filter::eNearest;\n\tsampler.minFilter = vk::Filter::eNearest;\n\t//sampler.addressModeU = vk::SamplerAddressMode::eRepeat;\n\t//sampler.addressModeV = vk::SamplerAddressMode::eRepeat;\t\n\t//sampler.addressModeW = vk::SamplerAddressMode::eRepeat;\n\n\ttex->sampler = core->gpudevice.createSampler(sampler);\n\n\tvk::DescriptorImageInfo imageInfo{};\n\timageInfo.sampler = tex->sampler;\n\timageInfo.imageView = tex->image.imageview;\n\timageInfo.imageLayout = vk::ImageLayout::eShaderReadOnlyOptimal;\n\n\tvk::WriteDescriptorSet write{};\n\twrite.dstBinding = 0;\n\twrite.descriptorCount = 1;\n\twrite.dstSet = tex->descriptor;\n\twrite.descriptorType = vk::DescriptorType::eCombinedImageSampler;\n\twrite.pImageInfo = &imageInfo;\n\n\tcore->gpudevice.updateDescriptorSets(1,&write,0,nullptr);\n}\n\nvoid MainEngine::destroy_texture(Texture* target) {\n\tcore->gpudevice.destroySampler(target->sampler, nullptr);\n}\n\nvoid MainEngine::CreateAllocator() {\n\tVmaAllocatorCreateInfo allocatorInfo{};\n\tallocatorInfo.physicalDevice = core->gpu;\n\tallocatorInfo.device = core->gpudevice;\n\tallocatorInfo.instance = core->instance;\n\tvmaCreateAllocator(&allocatorInfo,&vallocator);\n}\n\nvoid MainEngine::CreateSwapchain() {\n\n\tcore->GetNewSwapchain();\n\tswapchainDetails = &core->swapchainDetails;\n\n\tvk::SurfaceCapabilitiesKHR caps = swapchainDetails->capabilities;\n\n\tif (caps.currentExtent.width != std::numeric_limits<uint32_t>::max()) {\n\t\tswapchainExtent = caps.currentExtent;\n\t} else {\n\n\t\tint w,h;\n\t\tglfwGetFramebufferSize(core->window,&w,&h);\n\n\t\tswapchainExtent.width = std::clamp(\n\t\t\t(uint32_t) w, \n\t\t\tcaps.minImageExtent.width,\n\t\t\tcaps.maxImageExtent.width\n\t\t\t);\n\n\t\tswapchainExtent.height = std::clamp(\n\t\t\t(uint32_t) h, \n\t\t\tcaps.minImageExtent.height,\n\t\t\tcaps.maxImageExtent.height\n\t\t\t);\n\n\t}\n\n\tuint32_t swapimgcount = caps.minImageCount + 1;\n\tif (caps.maxImageCount > 0 && caps.minImageCount < swapimgcount) swapimgcount = caps.minImageCount;\n\n\tauto sharingmode = vk::SharingMode::eExclusive;\n\tuint32_t indexcount = 0;\n\tuint32_t queueindicesarray[] = {0,0};\n\n\tif (queueFamilies->graphics != queueFamilies->present) {\n\t\tsharingmode = vk::SharingMode::eConcurrent;\n\t\tindexcount = 2;\n\t\tqueueindicesarray[0] = queueFamilies->graphics.value();\n\t\tqueueindicesarray[1] = queueFamilies->present.value();\n\t}\n\n\tvk::SwapchainCreateInfoKHR swapCreateInfo{};\n\tswapCreateInfo.surface = core->surface.get();\n\tswapCreateInfo.minImageCount = swapimgcount;\n\tswapCreateInfo.imageFormat = swapchainDetails->surfaceFormat.format;\n\tswapCreateInfo.imageColorSpace = swapchainDetails->surfaceFormat.colorSpace;\n\tswapCreateInfo.imageExtent = swapchainExtent;\n\tswapCreateInfo.imageArrayLayers = 1;\n\tswapCreateInfo.imageUsage = vk::ImageUsageFlagBits::eColorAttachment;\n\tswapCreateInfo.imageSharingMode = sharingmode;\n\tswapCreateInfo.queueFamilyIndexCount = indexcount;\n\tswapCreateInfo.pQueueFamilyIndices = queueindicesarray;\n\tswapCreateInfo.preTransform = caps.currentTransform;\n\tswapCreateInfo.compositeAlpha = vk::CompositeAlphaFlagBitsKHR::eOpaque;\n\tswapCreateInfo.presentMode = swapchainDetails->presentMode;\n\tswapCreateInfo.clipped = true;\n\tswapCreateInfo.oldSwapchain = nullptr;\n\n\tswapchain = core->gpudevice.createSwapchainKHR(swapCreateInfo);\n\tswapchainImages = core->gpudevice.getSwapchainImagesKHR(swapchain);\n\n\tswapchainImageViews.resize(swapchainImages.size());\n\n\tfor (size_t i = 0; i < swapchainImages.size(); i++) {\n\n\t\tvk::ImageViewCreateInfo imgview{};\n\n\t\timgview.image = swapchainImages[i];\n\t\timgview.viewType = vk::ImageViewType::e2D;\n\t\timgview.format = swapchainDetails->surfaceFormat.format;\n\n\t\timgview.components.r = vk::ComponentSwizzle::eIdentity;\n\t\timgview.components.g = vk::ComponentSwizzle::eIdentity;\n\t\timgview.components.b = vk::ComponentSwizzle::eIdentity;\n\t\timgview.components.a = vk::ComponentSwizzle::eIdentity;\n\n\t\timgview.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eColor;\n\t\timgview.subresourceRange.baseMipLevel = 0;\n\t\timgview.subresourceRange.levelCount = 1;\n\t\timgview.subresourceRange.baseArrayLayer = 0;\n\t\timgview.subresourceRange.layerCount = 1;\n\n\t\tswapchainImageViews[i] = core->gpudevice.createImageView(imgview);\n\t\tstd::cout << \"imgview\" << i << std::endl;\n\n\t}\n\n\t//make depthimage\n\tdepthFormat = vk::Format::eD32Sfloat;\n\n\tvk::Extent3D depthImgExtent = {swapchainExtent.width,swapchainExtent.height,1};\n\t\n\tdepthImage = create_allocated_image(\n\t\tdepthFormat, \n\t\tvk::ImageUsageFlagBits::eDepthStencilAttachment, \n\t\tdepthImgExtent, \n\t\tVMA_MEMORY_USAGE_GPU_ONLY, \n\t\ttrue, \n\t\tvk::ImageAspectFlagBits::eDepth\n\t);\n\n}\n\nvoid MainEngine::CreateRenderpass() {\n\n\t\n\t//color\n\tvk::AttachmentDescription colorAttachment{};\n\tcolorAttachment.format = swapchainDetails->surfaceFormat.format;\n\tcolorAttachment.samples = vk::SampleCountFlagBits::e1;\n\tcolorAttachment.loadOp = vk::AttachmentLoadOp::eClear;\n\tcolorAttachment.storeOp = vk::AttachmentStoreOp::eStore;\n\tcolorAttachment.stencilLoadOp = vk::AttachmentLoadOp::eDontCare;\n\tcolorAttachment.stencilStoreOp = vk::AttachmentStoreOp::eDontCare;\n\tcolorAttachment.initialLayout = vk::ImageLayout::eUndefined;\n\tcolorAttachment.finalLayout = vk::ImageLayout::ePresentSrcKHR;\n\t\n\tvk::AttachmentReference colorRef{};\n\tcolorRef.attachment = 0;\n\tcolorRef.layout = vk::ImageLayout::eColorAttachmentOptimal;\n\t//\n\n\t//depth\n\tvk::AttachmentDescription depthAttachment{};\n\tdepthAttachment.format = depthFormat;\n\tdepthAttachment.samples = vk::SampleCountFlagBits::e1;\n\tdepthAttachment.loadOp = vk::AttachmentLoadOp::eClear;\n\tdepthAttachment.storeOp = vk::AttachmentStoreOp::eStore;\n\tdepthAttachment.stencilLoadOp = vk::AttachmentLoadOp::eClear;\n\tdepthAttachment.stencilStoreOp = vk::AttachmentStoreOp::eDontCare;\n\tdepthAttachment.initialLayout = vk::ImageLayout::eUndefined;\n\tdepthAttachment.finalLayout = vk::ImageLayout::eDepthStencilAttachmentOptimal;\n\t\n\tvk::AttachmentReference depthRef{};\n\tdepthRef.attachment = 1;\n\tdepthRef.layout = vk::ImageLayout::eDepthStencilAttachmentOptimal;\n\n\tvk::AttachmentReference depthRef_Single{};\n\tdepthRef_Single.attachment = 0;\n\tdepthRef_Single.layout = vk::ImageLayout::eDepthStencilAttachmentOptimal;\n\t//\n\n\t//subpass\n\tvk::SubpassDescription mainsubpass{};\n\tmainsubpass.pipelineBindPoint = vk::PipelineBindPoint::eGraphics;\n\tmainsubpass.colorAttachmentCount = 1;\n\tmainsubpass.pColorAttachments = &colorRef;\n\tmainsubpass.pDepthStencilAttachment = &depthRef;\n\n\tvk::SubpassDescription shadowsubpass{};\n\tshadowsubpass.pipelineBindPoint = vk::PipelineBindPoint::eGraphics;\n\tshadowsubpass.colorAttachmentCount = 0;\n\tshadowsubpass.pDepthStencilAttachment = &depthRef_Single;\n\n\tvk::SubpassDependency mainsubpassDependency{};\n\tmainsubpassDependency.srcSubpass = VK_SUBPASS_EXTERNAL; //everything before the render pass\n\tmainsubpassDependency.dstSubpass = 0;\n\tmainsubpassDependency.srcStageMask = vk::PipelineStageFlagBits::eColorAttachmentOutput; //wait for src color output to finish\n\tmainsubpassDependency.dstStageMask = vk::PipelineStageFlagBits::eColorAttachmentOutput; //once it finishes, run my color output\n\tmainsubpassDependency.srcAccessMask = {}; //src has no memory access types \n\tmainsubpassDependency.dstAccessMask = vk::AccessFlagBits::eColorAttachmentWrite; //im going to be writing to a color attachment\n\t\n\tvk::SubpassDependency depthsubpassDependency{};\n\tdepthsubpassDependency.srcSubpass = VK_SUBPASS_EXTERNAL; //everything before the render pass\n\tdepthsubpassDependency.dstSubpass = 0;\n\tdepthsubpassDependency.srcStageMask = vk::PipelineStageFlagBits::eEarlyFragmentTests | vk::PipelineStageFlagBits::eLateFragmentTests;\n\tdepthsubpassDependency.dstStageMask = vk::PipelineStageFlagBits::eEarlyFragmentTests | vk::PipelineStageFlagBits::eLateFragmentTests; \n\tdepthsubpassDependency.srcAccessMask = {};\n\tdepthsubpassDependency.dstAccessMask = vk::AccessFlagBits::eDepthStencilAttachmentWrite; \n\n\n\n\tvk::SubpassDependency shaderDepthSubpassDependency{};\n\tshaderDepthSubpassDependency.srcSubpass = VK_SUBPASS_EXTERNAL; //everything before the render pass\n\tshaderDepthSubpassDependency.dstSubpass = 0;\n\tshaderDepthSubpassDependency.srcStageMask = vk::PipelineStageFlagBits::eFragmentShader;\n\tshaderDepthSubpassDependency.dstStageMask = vk::PipelineStageFlagBits::eEarlyFragmentTests; \n\tshaderDepthSubpassDependency.srcAccessMask = {};\n\tshaderDepthSubpassDependency.dstAccessMask = vk::AccessFlagBits::eDepthStencilAttachmentWrite; \n\tshaderDepthSubpassDependency.dependencyFlags = vk::DependencyFlagBits::eByRegion;\n\n\tvk::SubpassDependency shaderDepthSubpassConvertDependency{};\n\tshaderDepthSubpassConvertDependency.srcSubpass = 0;\n\tshaderDepthSubpassConvertDependency.dstSubpass = VK_SUBPASS_EXTERNAL;\n\tshaderDepthSubpassConvertDependency.srcStageMask = vk::PipelineStageFlagBits::eLateFragmentTests;\n\tshaderDepthSubpassConvertDependency.dstStageMask = vk::PipelineStageFlagBits::eFragmentShader; \n\tshaderDepthSubpassConvertDependency.srcAccessMask = vk::AccessFlagBits::eDepthStencilAttachmentWrite;\n\tshaderDepthSubpassConvertDependency.dstAccessMask = vk::AccessFlagBits::eShaderRead; \n\tshaderDepthSubpassConvertDependency.dependencyFlags = vk::DependencyFlagBits::eByRegion;\n\n\t//\n\n\tvk::AttachmentDescription passAttachments[2] = {colorAttachment,depthAttachment};\n\tvk::SubpassDependency passDependencies[2] = {mainsubpassDependency,depthsubpassDependency};\n\n\tvk::RenderPassCreateInfo renderpassInfo{};\n\trenderpassInfo.flags = {};\n\trenderpassInfo.attachmentCount = 2;\n\trenderpassInfo.pAttachments = &passAttachments[0];\n\trenderpassInfo.subpassCount = 1;\n\trenderpassInfo.pSubpasses = &mainsubpass;\n\trenderpassInfo.dependencyCount = 2;\n\trenderpassInfo.pDependencies = &passDependencies[0];\n\n\trenderpass = core->gpudevice.createRenderPass(renderpassInfo);\n\n\tvk::AttachmentDescription shadowAttachments[1] = {depthAttachment};\n\tvk::SubpassDependency shadowDependencies[2] = {shaderDepthSubpassDependency,shaderDepthSubpassConvertDependency};\n\n\tvk::RenderPassCreateInfo renderpassInfo_shadow{};\n\trenderpassInfo_shadow.flags = {};\n\trenderpassInfo_shadow.attachmentCount = 1;\n\trenderpassInfo_shadow.pAttachments = &shadowAttachments[0];\n\trenderpassInfo_shadow.subpassCount = 1;\n\trenderpassInfo_shadow.pSubpasses = &shadowsubpass;\n\trenderpassInfo_shadow.dependencyCount = 2;\n\trenderpassInfo_shadow.pDependencies = &shadowDependencies[0];\n\n\trenderpass_shadow = core->gpudevice.createRenderPass(renderpassInfo_shadow);\n\n\n}\n\nvoid MainEngine::CreateFramebuffer() {\n\n\tswapchainFramebuffer.resize(swapchainImageViews.size());\n\n\tfor (size_t i = 0; i < swapchainImageViews.size(); i++) {\n\n\t\tvk::ImageView imageview_attachments[2] = {swapchainImageViews[i],depthImage.imageview};\n\n\t\tvk::FramebufferCreateInfo fbinfo{};\n\t\tfbinfo.renderPass = renderpass;\n\t\tfbinfo.attachmentCount = 2;\n\t\tfbinfo.pAttachments = imageview_attachments;\n\t\tfbinfo.width = swapchainExtent.width;\n\t\tfbinfo.height = swapchainExtent.height;\n\t\tfbinfo.layers = 1;\n\n\t\tswapchainFramebuffer[i] = core->gpudevice.createFramebuffer(fbinfo);\n\t\tstd::cout << \"made framebuffer\" << i << std::endl;\n\n\t}\n\n\n}\n\nvoid MainEngine::CreateCommandpool() {\n\n\tvk::CommandPoolCreateInfo cmdpoolinfo{};\n\tcmdpoolinfo.flags = vk::CommandPoolCreateFlagBits::eResetCommandBuffer;\n\tcmdpoolinfo.queueFamilyIndex = queueFamilies->graphics.value();\n\n\tcmdPool = core->gpudevice.createCommandPool(cmdpoolinfo);\n\tstd::cout << \"cmdpool created\" << std::endl;\n\n\tvk::CommandBufferAllocateInfo bufferallocation{};\n\tbufferallocation.commandPool = cmdPool;\n\tbufferallocation.level = vk::CommandBufferLevel::ePrimary;\n\tbufferallocation.commandBufferCount = frameFlightNum;\n\n\tcmdBuffers = core->gpudevice.allocateCommandBuffers(bufferallocation);\n\tstd::cout << \"allocated buffers\" << std::endl;\n\n\t//upload\n\tvk::CommandPoolCreateInfo uploadcmdpoolinfo{};\n\tuploadcmdpoolinfo.flags = vk::CommandPoolCreateFlagBits::eResetCommandBuffer;\n\tuploadcmdpoolinfo.queueFamilyIndex = queueFamilies->graphics.value();\n\tuploadCmdPool = core->gpudevice.createCommandPool(uploadcmdpoolinfo);\n\n\tvk::CommandBufferAllocateInfo uploadbufferallocation{};\n\tuploadbufferallocation.commandPool = uploadCmdPool;\n\tuploadbufferallocation.level = vk::CommandBufferLevel::ePrimary;\n\tuploadbufferallocation.commandBufferCount = 1;\n\tuploadCmdBuffer = core->gpudevice.allocateCommandBuffers(uploadbufferallocation).front();\n\t\n\tstd::cout << \"upload buffer done\" << std::endl;\n\n\t//shadow\n\tvk::CommandPoolCreateInfo shadowcmdpoolinfo{};\n\tshadowcmdpoolinfo.flags = vk::CommandPoolCreateFlagBits::eResetCommandBuffer;\n\tshadowcmdpoolinfo.queueFamilyIndex = queueFamilies->graphics.value();\n\tshadowCmdPool = core->gpudevice.createCommandPool(uploadcmdpoolinfo);\n\n\tvk::CommandBufferAllocateInfo shadowbufferallocation{};\n\tshadowbufferallocation.commandPool = shadowCmdPool;\n\tshadowbufferallocation.level = vk::CommandBufferLevel::ePrimary;\n\tshadowbufferallocation.commandBufferCount = 1;\n\tshadowCmdBuffer = core->gpudevice.allocateCommandBuffers(uploadbufferallocation).front();\n\t\n\tstd::cout << \"shadow buffer done\" << std::endl;\n\n}\n\nvoid MainEngine::CreateDescriptorSets() {\n\n\t//make pool\n\tstd::vector<vk::DescriptorPoolSize> sizes = {\n\t\t{vk::DescriptorType::eUniformBuffer, 10},\n\t\t{vk::DescriptorType::eStorageBuffer, 10},\n\t\t{vk::DescriptorType::eCombinedImageSampler, 10},\n\t};\n\n\tvk::DescriptorPoolCreateInfo poolInfo{};\n\tpoolInfo.maxSets = 10;\n\tpoolInfo.poolSizeCount = (uint32_t)sizes.size();\n\tpoolInfo.pPoolSizes = sizes.data();\n\tdescriptorPool = core->gpudevice.createDescriptorPool(poolInfo);\n\n\t//create bindings\n\n\tvk::DescriptorSetLayoutBinding cameraBufferBinding{};\n\tcameraBufferBinding.binding = 0;\n\tcameraBufferBinding.descriptorCount = 1;\n\tcameraBufferBinding.descriptorType = vk::DescriptorType::eUniformBuffer;\n\tcameraBufferBinding.stageFlags = vk::ShaderStageFlagBits::eVertex;\n\n\tvk::DescriptorSetLayoutBinding shadowmapDepthBinding{};\n\tshadowmapDepthBinding.binding = 1;\n\tshadowmapDepthBinding.descriptorCount = 1;\n\tshadowmapDepthBinding.descriptorType = vk::DescriptorType::eCombinedImageSampler;\n\tshadowmapDepthBinding.stageFlags = vk::ShaderStageFlagBits::eFragment;\n\n\tvk::DescriptorSetLayoutBinding bindings[] = {cameraBufferBinding,shadowmapDepthBinding};\n\n\tvk::DescriptorSetLayoutCreateInfo setinfo{};\n\tsetinfo.bindingCount = 2;\n\tsetinfo.pBindings = bindings;\n\n\t//object data\n\n\tvk::DescriptorSetLayoutBinding objectdataBufferBinding{};\n\tobjectdataBufferBinding.binding = 0;\n\tobjectdataBufferBinding.descriptorCount = 1;\n\tobjectdataBufferBinding.descriptorType = vk::DescriptorType::eStorageBuffer;\n\tobjectdataBufferBinding.stageFlags = vk::ShaderStageFlagBits::eVertex;\n\n\tvk::DescriptorSetLayoutCreateInfo setinfo_objectdata{};\n\tsetinfo_objectdata.bindingCount = 1;\n\tsetinfo_objectdata.pBindings = &objectdataBufferBinding;\t\n\n\t//texture\n\n\tvk::DescriptorSetLayoutBinding textureBufferBinding{};\n\ttextureBufferBinding.binding = 0;\n\ttextureBufferBinding.descriptorCount = 1;\n\ttextureBufferBinding.descriptorType = vk::DescriptorType::eCombinedImageSampler;\n\ttextureBufferBinding.stageFlags = vk::ShaderStageFlagBits::eFragment;\n\n\tvk::DescriptorSetLayoutCreateInfo setinfo_texture{};\n\tsetinfo_texture.bindingCount = 1;\n\tsetinfo_texture.pBindings = &textureBufferBinding;\n\n\tdescriptorSetLayout = core->gpudevice.createDescriptorSetLayout(setinfo);\n\tdescriptorSetLayout_objectdata = core->gpudevice.createDescriptorSetLayout(setinfo_objectdata);\n\tdescriptorSetLayout_texture = core->gpudevice.createDescriptorSetLayout(setinfo_texture);\n\n\n\tframes.resize(frameFlightNum);\n\n\tfor (uint32_t i = 0; i < frameFlightNum; i++) {\n\t\tInitShadowmap(&frames[i].shadows);\n\n\t\tframes[i].cameraBuffer = create_allocated_buffer(\n\t\t\tsizeof(WorldData),\n\t\t\tvk::BufferUsageFlagBits::eUniformBuffer,\n\t\t\tVMA_MEMORY_USAGE_CPU_TO_GPU //change this\n\t\t);\n\n\t\tframes[i].objectdataBuffer = create_allocated_buffer(\n\t\t\tsizeof(GPUObjectData) * MAX_OBJECTS,\n\t\t\tvk::BufferUsageFlagBits::eStorageBuffer,\n\t\t\tVMA_MEMORY_USAGE_CPU_TO_GPU //also this\n\t\t);\n\n\t\t//allocate\n\n\t\t//cam\n\t\tvk::DescriptorSetAllocateInfo allocateinfo{};\n\t\tallocateinfo.descriptorPool = descriptorPool;\n\t\tallocateinfo.descriptorSetCount = 1;\n\t\tallocateinfo.pSetLayouts = &descriptorSetLayout;\n\n\t\tframes[i].descriptor = core->gpudevice.allocateDescriptorSets(allocateinfo).front();\n\n\t\t//obj\n\t\tvk::DescriptorSetAllocateInfo allocateinfo_obj{};\n\t\tallocateinfo_obj.descriptorPool = descriptorPool;\n\t\tallocateinfo_obj.descriptorSetCount = 1;\n\t\tallocateinfo_obj.pSetLayouts = &descriptorSetLayout_objectdata;\n\n\t\tframes[i].objectdescriptor = core->gpudevice.allocateDescriptorSets(allocateinfo_obj).front();\n\n\t\t//cam\n\t\tvk::DescriptorBufferInfo camerabufferinfo{};\n\t\tcamerabufferinfo.buffer = frames[i].cameraBuffer.buffer;\n\t\tcamerabufferinfo.offset = 0;\n\t\tcamerabufferinfo.range = sizeof(WorldData);\n\n\t\tvk::SamplerCreateInfo shadowmapSampler{};\n\t\tshadowmapSampler.magFilter = vk::Filter::eNearest;\n\t\tshadowmapSampler.minFilter = vk::Filter::eNearest;\n\n\t\tframes[i].shadows.sampler = core->gpudevice.createSampler(shadowmapSampler);\n\n\t\tvk::DescriptorImageInfo shadowmapInfo{};\n\t\tshadowmapInfo.sampler = frames[i].shadows.sampler;\n\t\tshadowmapInfo.imageView = frames[i].shadows.depthImage.imageview;\n\t\tshadowmapInfo.imageLayout = vk::ImageLayout::eShaderReadOnlyOptimal;\n\n\n\n\t\tvk::WriteDescriptorSet camerawrite{};\n\t\tcamerawrite.dstSet = frames[i].descriptor;\n\t\tcamerawrite.dstBinding = 0;\n\t\tcamerawrite.descriptorCount = 1;\n\t\tcamerawrite.descriptorType = vk::DescriptorType::eUniformBuffer;\n\t\tcamerawrite.pBufferInfo = &camerabufferinfo;\n\n\t\tvk::WriteDescriptorSet shadowmapwrite{};\n\t\tshadowmapwrite.dstSet = frames[i].descriptor;\n\t\tshadowmapwrite.dstBinding = 1;\n\t\tshadowmapwrite.descriptorCount = 1;\n\t\tshadowmapwrite.descriptorType = vk::DescriptorType::eCombinedImageSampler;\n\t\tshadowmapwrite.pImageInfo = &shadowmapInfo;\n\n\n\t\t//obj\n\t\tvk::DescriptorBufferInfo objectbufferinfo{};\n\t\tobjectbufferinfo.buffer = frames[i].objectdataBuffer.buffer;\n\t\tobjectbufferinfo.offset = 0;\n\t\tobjectbufferinfo.range = sizeof(GPUObjectData) * MAX_OBJECTS;\n\n\t\tvk::WriteDescriptorSet objectbufferwrite{};\n\t\tobjectbufferwrite.dstSet = frames[i].objectdescriptor;\n\t\tobjectbufferwrite.dstBinding = 0;\n\t\tobjectbufferwrite.descriptorCount = 1;\n\t\tobjectbufferwrite.descriptorType = vk::DescriptorType::eStorageBuffer;\n\t\tobjectbufferwrite.pBufferInfo = &objectbufferinfo;\n\n\t\t//update allocation\n\t\tvk::WriteDescriptorSet cwrites[] = {camerawrite,shadowmapwrite};\n\n\t\tcore->gpudevice.updateDescriptorSets(2,cwrites,0,nullptr);\t\n\t\tcore->gpudevice.updateDescriptorSets(1,&objectbufferwrite,0,nullptr);\t\n\n\t}\n\n\n}\n\nvoid MainEngine::CreateSyncObjects() {\n\n\tvk::SemaphoreCreateInfo seminfo{};\n\tvk::FenceCreateInfo fenceinfo(vk::FenceCreateFlagBits::eSignaled);\n\n\tswapimageavailable_semaphores.resize(frameFlightNum);\n\trendersubmit_semaphores.resize(frameFlightNum);\n\trender_fences.resize(frameFlightNum);\n\n\tfor (uint32_t i = 0; i < frameFlightNum; i++) {\n\t\tswapimageavailable_semaphores[i] = core->gpudevice.createSemaphore(seminfo);\n\t\trendersubmit_semaphores[i] = core->gpudevice.createSemaphore(seminfo);\n\t\trender_fences[i] = core->gpudevice.createFence(fenceinfo);\n\t}\n\n\tvk::FenceCreateInfo ufenceinfo{};\n\tuploadFence = core->gpudevice.createFence(ufenceinfo);\n\n}\n\nvoid MainEngine::Create_New_Pipeline(MainEnginePipelineInfo& main_pipeline_info, vk::PipelineLayout& target_layout, vk::Pipeline& target_pipeline) {\n\n\t//vk::DescriptorSetLayout dslayouts[3];\n\n\tstd::vector<vk::DescriptorSetLayout> dslayouts;\n\n\tif (main_pipeline_info.DepthOnly == true) {\n\t\tdslayouts.resize(3);\n\t\tdslayouts = {descriptorSetLayout,descriptorSetLayout_texture,descriptorSetLayout_objectdata};\t\n\t\tstd::cout << \"depth ds\" << std::endl;\n\t}\n\telse if (main_pipeline_info.Textured == true) {\n\t\tdslayouts.resize(3);\n\t\tdslayouts = {descriptorSetLayout,descriptorSetLayout_texture,descriptorSetLayout_objectdata};\n\t\tstd::cout << \"textured ds\" << std::endl;\n\t} else {\n\t\tdslayouts.resize(2);\n\t\tdslayouts = {descriptorSetLayout,descriptorSetLayout_objectdata};\n\t\tstd::cout << \"untextured ds\" << std::endl;\n\t}\n\n\tif (main_pipeline_info.DepthOnly == true) {\n\n\t\tvk::PipelineLayoutCreateInfo layoutinfo{};\n\t\tlayoutinfo.pPushConstantRanges = nullptr;\n\t\tlayoutinfo.pushConstantRangeCount = 0;\n\t\tlayoutinfo.setLayoutCount = 3;\n\t\tlayoutinfo.pSetLayouts = dslayouts.data();\n\n\t\ttarget_layout = core->gpudevice.createPipelineLayout(layoutinfo);\n\n\t\tauto vertexFile = readFile(main_pipeline_info.VertexShaderPath);\n\t\tvk::ShaderModule vertexShader = setupShader(vertexFile,core->gpudevice);\n\t\tvk::PipelineShaderStageCreateInfo vertInfo{};\n\t\tvertInfo.stage = vk::ShaderStageFlagBits::eVertex;\n\t\tvertInfo.module = vertexShader;\n\t\tvertInfo.pName = \"main\";\n\n\t\tvk::PipelineShaderStageCreateInfo stages[] = {vertInfo};\n\n\t\t//dynamics\n\t\tstd::vector<vk::DynamicState> dynamicStates = {vk::DynamicState::eViewport,vk::DynamicState::eScissor};\n\n\t\tvk::PipelineDynamicStateCreateInfo dynamicState{};\n\t\tdynamicState.dynamicStateCount = dynamicStates.size();\n\t\tdynamicState.pDynamicStates = dynamicStates.data();\n\t\t//\n\n\t\t//assembly\n\t\tvk::PipelineInputAssemblyStateCreateInfo inputAssembly{};\n\t\tinputAssembly.topology = vk::PrimitiveTopology::eTriangleList;\n\t\tinputAssembly.primitiveRestartEnable = false;\n\t\t//\n\n\t\t//viewport\n\t\tvk::PipelineViewportStateCreateInfo viewportState{};\n\t\tviewportState.viewportCount = 1;\n\t\tviewportState.scissorCount = 1;\n\t\t//\n\n\t\t//depth stencil\n\t\tvk::PipelineDepthStencilStateCreateInfo depthstencil{};\n\t\tdepthstencil.depthTestEnable = true;\n\t\tdepthstencil.depthWriteEnable = true;\n\t\tdepthstencil.depthCompareOp = vk::CompareOp::eLessOrEqual;\n\t\tdepthstencil.depthBoundsTestEnable = false;\n\t\tdepthstencil.stencilTestEnable = false;\n\n\t\t//vertex input\n\t\tVertInputStateDesc defaultdesc;\n\t\tdefaultdesc.GetDefaultState();\n\n\t\tvk::PipelineVertexInputStateCreateInfo vertexInputStateInfo{};\n\t\tvertexInputStateInfo.vertexBindingDescriptionCount = defaultdesc.bindings.size();\n\t\tvertexInputStateInfo.vertexAttributeDescriptionCount = defaultdesc.attributes.size();\n\n\t\tvertexInputStateInfo.pVertexBindingDescriptions = defaultdesc.bindings.data();\n\t\tvertexInputStateInfo.pVertexAttributeDescriptions = defaultdesc.attributes.data();\n\t\t//\n\n\t\t//rasterizer\n\t\tvk::PipelineRasterizationStateCreateInfo rasterizer{};\n\t\trasterizer.depthClampEnable = false;\n\t\trasterizer.rasterizerDiscardEnable = true;\n\t\trasterizer.polygonMode = vk::PolygonMode::eFill;\n\t\trasterizer.cullMode = vk::CullModeFlagBits::eNone;\t\n\t\trasterizer.frontFace = vk::FrontFace::eCounterClockwise;\n\t\trasterizer.depthBiasEnable = false;\n\t\trasterizer.lineWidth = 1.0f;\n\t\t//\n\n\n\t\tvk::GraphicsPipelineCreateInfo graphicsinfo{};\n\n\t\tgraphicsinfo.stageCount = 1;\n\t\tgraphicsinfo.pStages = stages;\n\n\t\tgraphicsinfo.pVertexInputState = &vertexInputStateInfo;\n\t\tgraphicsinfo.pInputAssemblyState = &inputAssembly;\n\t\tgraphicsinfo.pTessellationState = nullptr;\n\t\tgraphicsinfo.pViewportState = &viewportState;\n\t\tgraphicsinfo.pRasterizationState = &rasterizer;\n\t\tgraphicsinfo.pMultisampleState = nullptr;\n\t\tgraphicsinfo.pDepthStencilState = &depthstencil;\n\t\tgraphicsinfo.pColorBlendState = nullptr;\n\t\tgraphicsinfo.pDynamicState = &dynamicState;\n\t\tgraphicsinfo.layout = target_layout;\n\n\t\tgraphicsinfo.renderPass = renderpass_shadow; //hardecoded LOL\n\t\tgraphicsinfo.subpass = 0;\n\t\tgraphicsinfo.basePipelineHandle = nullptr;\n\t\tgraphicsinfo.basePipelineIndex = -1;\n\n\t\tvk::Result res;\n\t\tstd::tie(res,target_pipeline) = core->gpudevice.createGraphicsPipeline(nullptr,graphicsinfo);\n\t\tstd::cout << \"fin depth buffer only\" << std::endl;\n\n\t\tcore->gpudevice.destroyShaderModule(vertexShader);\n\n\t\treturn;\n\t}\n\n\tvk::PipelineLayoutCreateInfo defaultinfo{};\n\tdefaultinfo.pPushConstantRanges = nullptr;\n\tdefaultinfo.pushConstantRangeCount = 0;\n\tdefaultinfo.setLayoutCount = 3;\n\tdefaultinfo.pSetLayouts = dslayouts.data();\n\n\ttarget_layout = core->gpudevice.createPipelineLayout(defaultinfo);\n\n\t//setup shaders\n\tauto vertexFile = readFile(main_pipeline_info.VertexShaderPath);\n\tauto fragFile = readFile(main_pipeline_info.FragmentShaderPath);\n\t//vert\n\tvk::ShaderModule vertexShader = setupShader(vertexFile,core->gpudevice);\n\n\tvk::PipelineShaderStageCreateInfo vertInfo{};\n\tvertInfo.stage = vk::ShaderStageFlagBits::eVertex;\n\tvertInfo.module = vertexShader;\n\tvertInfo.pName = \"main\";\n\t//frag\n\tvk::ShaderModule fragmentShader = setupShader(fragFile,core->gpudevice);\n\tvk::PipelineShaderStageCreateInfo fragInfo{};\n\tfragInfo.stage = vk::ShaderStageFlagBits::eFragment;\n\tfragInfo.module = fragmentShader;\n\tfragInfo.pName = \"main\";\n\n\tvk::PipelineShaderStageCreateInfo stages[] = {vertInfo,fragInfo};\n\t//\n\n\t//dynamics\n\tstd::vector<vk::DynamicState> dynamicStates = {vk::DynamicState::eViewport,vk::DynamicState::eScissor};\n\n\tvk::PipelineDynamicStateCreateInfo dynamicState{};\n\tdynamicState.dynamicStateCount = dynamicStates.size();\n\tdynamicState.pDynamicStates = dynamicStates.data();\n\t//\n\n\t//assembly\n\tvk::PipelineInputAssemblyStateCreateInfo inputAssembly{};\n\tinputAssembly.topology = vk::PrimitiveTopology::eTriangleList;\n\tinputAssembly.primitiveRestartEnable = false;\n\t//\n\n\t//viewport\n\tvk::PipelineViewportStateCreateInfo viewportState{};\n\tviewportState.viewportCount = 1;\n\tviewportState.scissorCount = 1;\n\t//\n\n\t//rasterizer\n\tvk::PipelineRasterizationStateCreateInfo rasterizer{};\n\trasterizer.depthClampEnable = false;\n\trasterizer.rasterizerDiscardEnable = false;\n\trasterizer.polygonMode = vk::PolygonMode::eFill;\n\trasterizer.cullMode = vk::CullModeFlagBits::eNone;\t\n\trasterizer.frontFace = vk::FrontFace::eCounterClockwise;\n\trasterizer.depthBiasEnable = false;\n\trasterizer.lineWidth = 1.0f;\n\t//\n\n\t//coLor blending\n\tvk::PipelineColorBlendAttachmentState colorattachmentstate{};\n\tcolorattachmentstate.blendEnable = true;\n\tcolorattachmentstate.srcColorBlendFactor = vk::BlendFactor::eSrcAlpha; //alpha\n\tcolorattachmentstate.dstColorBlendFactor = vk::BlendFactor::eOneMinusSrcAlpha; //1-alpha\n\tcolorattachmentstate.colorBlendOp = vk::BlendOp::eAdd; // color*alpha + dstcolor*(1-alpha)\n\tcolorattachmentstate.srcAlphaBlendFactor = vk::BlendFactor::eOne;\n\tcolorattachmentstate.dstAlphaBlendFactor = vk::BlendFactor::eZero;\n\tcolorattachmentstate.alphaBlendOp = vk::BlendOp::eAdd;\n\tcolorattachmentstate.colorWriteMask = vk::ColorComponentFlagBits::eR | vk::ColorComponentFlagBits::eG | vk::ColorComponentFlagBits::eB;\n\n\tvk::PipelineColorBlendStateCreateInfo colorBlendState{};\n\tcolorBlendState.logicOpEnable = false;\n\tcolorBlendState.attachmentCount = 1;\n\tcolorBlendState.pAttachments = &colorattachmentstate;\n\n\t//multisampling\n\tvk::PipelineMultisampleStateCreateInfo multisample{};\n\tmultisample.rasterizationSamples = vk::SampleCountFlagBits::e1;\n\n\t//vertex input\n\tVertInputStateDesc defaultdesc;\n\tdefaultdesc.GetDefaultState();\n\n\tvk::PipelineVertexInputStateCreateInfo vertexInputStateInfo{};\n\tvertexInputStateInfo.vertexBindingDescriptionCount = defaultdesc.bindings.size();\n\tvertexInputStateInfo.vertexAttributeDescriptionCount = defaultdesc.attributes.size();\n\n\tvertexInputStateInfo.pVertexBindingDescriptions = defaultdesc.bindings.data();\n\tvertexInputStateInfo.pVertexAttributeDescriptions = defaultdesc.attributes.data();\n\t//\n\n\t//depth stencil\n\tvk::PipelineDepthStencilStateCreateInfo depthstencil{};\n\tdepthstencil.depthTestEnable = true;\n\tdepthstencil.depthWriteEnable = true;\n\tdepthstencil.depthCompareOp = vk::CompareOp::eLessOrEqual;\n\tdepthstencil.depthBoundsTestEnable = false;\n\t//basically you can check if an incoming fragment/pixels depth is inbetween 2 given values\n\t//if they arent, you can discard them. i guess this is good for lighting\n\t//since you can just completely disregard things that are not within the vicinity of a \n\t//light source\n\tdepthstencil.stencilTestEnable = false;\n\t//\n\t\n\tvk::GraphicsPipelineCreateInfo graphicsinfo{};\n\n\tgraphicsinfo.stageCount = 2; //how many fragment, vertex, geometry etc\n\tgraphicsinfo.pStages = stages;\n\n\tgraphicsinfo.pVertexInputState = &vertexInputStateInfo;\n\tgraphicsinfo.pInputAssemblyState = &inputAssembly;\n\tgraphicsinfo.pTessellationState = nullptr;\n\tgraphicsinfo.pViewportState = &viewportState;\n\tgraphicsinfo.pRasterizationState = &rasterizer;\n\tgraphicsinfo.pMultisampleState = &multisample;\n\tgraphicsinfo.pDepthStencilState = &depthstencil;\n\tgraphicsinfo.pColorBlendState = &colorBlendState;\n\tgraphicsinfo.pDynamicState = &dynamicState;\n\tgraphicsinfo.layout = target_layout;\n\n\tgraphicsinfo.renderPass = renderpass;\n\tgraphicsinfo.subpass = 0;\n\tgraphicsinfo.basePipelineHandle = nullptr;\n\tgraphicsinfo.basePipelineIndex = -1;\n\n\tvk::Result res;\n\tstd::tie(res,target_pipeline) = core->gpudevice.createGraphicsPipeline(nullptr,graphicsinfo);\n\tstd::cout << \"fin gpipeline\" << std::endl;\n\n\tcore->gpudevice.destroyShaderModule(vertexShader);\n\tcore->gpudevice.destroyShaderModule(fragmentShader);\n\t\n}\n\nvoid MainEngine::CreateGraphicsPipeline() {\n\n\tMainEnginePipelineInfo info;\n\tinfo.VertexShaderPath = \"shaders/vert.spv\";\n\tinfo.FragmentShaderPath = \"shaders/frag.spv\";\n\tinfo.Textured = true;\n\n\tMainEnginePipelineInfo info2;\n\tinfo2.VertexShaderPath = \"shaders/vert.spv\";\n\tinfo2.FragmentShaderPath = \"shaders/frag_untex.spv\";\n\tinfo2.Textured = true;\n\n\n\tstd::cout << \"textured\" << std::endl;\n\tCreate_New_Pipeline(info, pipelineLayout_textured, graphicsPipeline_textured);\t\n\tstd::cout << \"textured\" << std::endl;\n\tCreate_New_Pipeline(info2, pipelineLayout_untextured, graphicsPipeline_untextured);\t\n}\n\nvoid MainEngine::CreateShadowmap() {\n\tMainEnginePipelineInfo info;\n\tinfo.VertexShaderPath = \"shaders/vert.spv\";\n\tinfo.DepthOnly = true;\n\n\tCreate_New_Pipeline(info, shadowmapLayout, shadowmapPipeline);\t\n}\n\nvoid MainEngine::InitShadowmap(ShadowMapper* target) {\n\tvk::Extent3D depthImgExtent = {100,100,1};\n\ttarget->extent = depthImgExtent;\n\n\tstd::cout << \"a\" << std::endl;\n\n\ttarget->depthImage = create_allocated_image(\n\t\tdepthFormat, \n\t\tvk::ImageUsageFlagBits::eDepthStencilAttachment | vk::ImageUsageFlagBits::eSampled, \n\t\ttarget->extent, \n\t\tVMA_MEMORY_USAGE_GPU_ONLY, \n\t\ttrue, \n\t\tvk::ImageAspectFlagBits::eDepth\n\t);\n\n\tstd::cout << \"b\" << std::endl;\n\t\n\tvk::FramebufferCreateInfo fbinfo{};\n\tfbinfo.renderPass = renderpass_shadow;\n\tfbinfo.attachmentCount = 1;\n\tfbinfo.pAttachments = &target->depthImage.imageview;\n\tfbinfo.width = 100;\n\tfbinfo.height = 100;\n\tfbinfo.layers = 1;\n\n\tstd::cout << \"c\" << std::endl;\n\t\n\ttarget->framebuffer = core->gpudevice.createFramebuffer(fbinfo);\n\tstd::cout << \"made shadow framebuffer\" << std::endl;\n}\n\nvoid MainEngine::initial() {\n\tscene_draw_target = &default_scene;\n}\n\nvoid MainEngine::step() { \n// ######## I WILL REMOVE THIS LATER ###############\n}\n\nvoid MainEngine::run_gpu_instruction(std::function<void(vk::CommandBuffer cmd)>&& function) {\n\t\n\tvk::CommandBufferBeginInfo begininfo{};\n\tbegininfo.flags = vk::CommandBufferUsageFlagBits::eOneTimeSubmit;\n\n\tuploadCmdBuffer.begin(begininfo);\n\tfunction(uploadCmdBuffer);\n\tuploadCmdBuffer.end();\n\n\tvk::SubmitInfo submitinfo{};\n\tsubmitinfo.commandBufferCount = 1;\n\tsubmitinfo.pCommandBuffers = &uploadCmdBuffer;\n\n\t[[maybe_unused]] vk::Result res;\n\tres = core->graphicsQueue.submit(1, &submitinfo, uploadFence);\n\tres = core->gpudevice.waitForFences(1, &uploadFence, true, UINT32_MAX);\n\tres = core->gpudevice.resetFences(1,&uploadFence);\n\n\tcore->gpudevice.resetCommandPool(uploadCmdPool);\n\n}\n\nbool MainEngine::upload_mesh(Mesh* target) {\n\n\tconst size_t buffer_size = target->vertices.size() * sizeof(Vertex);\n\n\tAllocatedBuffer stagingbuffer = create_allocated_buffer(\n\t\tbuffer_size,\n\t\tvk::BufferUsageFlagBits::eTransferSrc,\n\t\tVMA_MEMORY_USAGE_CPU_ONLY\n\t);\n\n\ttarget->vertexBuffer = create_allocated_buffer(\n\t\tbuffer_size,\n\t\tvk::BufferUsageFlagBits::eVertexBuffer | vk::BufferUsageFlagBits::eTransferDst,\n\t\tVMA_MEMORY_USAGE_GPU_ONLY\n\t);\n\n\tvoid* vertexdata;\n\tvmaMapMemory(vallocator, stagingbuffer.allocation, &vertexdata);\n\tmemcpy(vertexdata, target->vertices.data(), target->vertices.size() * sizeof(Vertex));\n\tvmaUnmapMemory(vallocator, stagingbuffer.allocation);\n\n\trun_gpu_instruction([=](vk::CommandBuffer cmd) {\n\t\tvk::BufferCopy vertexbuffer_copy{};\n\t\tvertexbuffer_copy.dstOffset = 0;\n\t\tvertexbuffer_copy.srcOffset = 0;\n\t\tvertexbuffer_copy.size = buffer_size;\n\t\tcmd.copyBuffer(stagingbuffer.buffer, target->vertexBuffer.buffer, 1, &vertexbuffer_copy);\n\t});\n\n\tdestroy_allocated_buffer(&stagingbuffer);\n\n\tstd::cout << \"uploaded testmesh\" <<std::endl;\n\n\treturn true;\n\n}\n\nstatic void WindowResizedCallback(GLFWwindow* win, int w, int h) {\n\tauto eng = reinterpret_cast<MainEngine*>(glfwGetWindowUserPointer(win));\n\teng->windowResized = false;\n}\n\nvoid MainEngine::ReCreateSwapchain() {\n\tcore->gpudevice.waitIdle();\n    for (auto thing : swapchainImageViews) {\n    \tcore->gpudevice.destroyImageView(thing, nullptr);\n    }\n \tfor (auto thing : swapchainFramebuffer) {\n    \tcore->gpudevice.destroyFramebuffer(thing, nullptr);\n    }\n    core->gpudevice.destroySwapchainKHR(swapchain, nullptr);\n    destroy_allocated_image(&depthImage);\n    CreateSwapchain();\n    CreateFramebuffer();\n}\n\nvoid MainEngine::shadowdraw(FrameInfo* current) {\n\n\tShadowMapper* shadowmap = &current->shadows;\n\tshadowCmdBuffer.reset();\n\tvk::ClearValue depthclearcol{};\n\tdepthclearcol.depthStencil.depth = 1.0f;\n\tvk::ClearValue clearvalues[1] = {depthclearcol};\n\n\tvk::Rect2D renderrect;\n\tvk::Extent2D sextent = {shadowmap->extent.width,shadowmap->extent.height};\n\trenderrect.extent = sextent;\n\tvk::CommandBufferBeginInfo commandbegininfo{};\n\n\tvk::RenderPassBeginInfo begininfo{};\n\tbegininfo.renderPass = renderpass_shadow;\n\tbegininfo.framebuffer = shadowmap->framebuffer;\n\tbegininfo.renderArea = renderrect;\n\tbegininfo.clearValueCount = 1;\n\tbegininfo.pClearValues = &clearvalues[0];\n\n\tshadowCmdBuffer.begin(commandbegininfo);\n\tshadowCmdBuffer.beginRenderPass(begininfo, vk::SubpassContents::eInline);\n\n\t\tvk::Viewport vp;\n\tvp.width = (float) shadowmap->extent.width;\n\tvp.height = (float) shadowmap->extent.height;\n\tvp.maxDepth = 1.0f;\n\tshadowCmdBuffer.setViewport(0, 1, &vp);\n\tshadowCmdBuffer.setScissor(0, 1, &renderrect);\n\n\tMaterial* oldmaterial = nullptr;\n\tMesh* oldmesh = nullptr;\n\n\tshadowCmdBuffer.bindPipeline(vk::PipelineBindPoint::eGraphics,shadowmapPipeline);\n\n\tshadowCmdBuffer.bindDescriptorSets(\n\t\tvk::PipelineBindPoint::eGraphics,\n\t\tshadowmapLayout,\n\t\t0,1,\n\t\t&current->descriptor,\n\t\t0,\n\t\tnullptr\n\t);\n\n\tshadowCmdBuffer.bindDescriptorSets(\n\t\tvk::PipelineBindPoint::eGraphics,\n\t\tshadowmapLayout,\n\t\t2,1,\n\t\t&current->objectdescriptor,\n\t\t0,\n\t\tnullptr\n\t);\n\n\tfor (size_t i = 0; i < scene_draw_target->objects.size(); i++) {\n\t\tObject* obj = scene_draw_target->objects[i];\n\n\t\tif (obj->mesh != nullptr) {\n\n\t\t\tif (oldmesh != obj->mesh) {\n\t\t\t\tvk::DeviceSize offset = 0;\n\t\t\t\tshadowCmdBuffer.bindVertexBuffers(0,1,&obj->mesh->vertexBuffer.buffer,&offset);\n\t\t\t\toldmesh = obj->mesh;\n\t\t\t}else {\n\t\t\t\t//std::cout << \"same mesh\" << std::endl;\n\t\t\t}\n\t\t\t//std::cout << \"draw\" << std::endl;\n\t\t\tshadowCmdBuffer.draw(obj->mesh->vertices.size(),1,0,i);\n\t\t}\n\t}\t\n\n\tshadowCmdBuffer.endRenderPass();\n\tshadowCmdBuffer.end();\n\n}\n\nvoid MainEngine::draw() {\n\t//\tstd::cout << \"draw starting\" << std::endl; \n\n\tvk::Semaphore& swapchainavailable_S = swapimageavailable_semaphores[currentFlight];\n\tvk::Semaphore& rendersubmit_S = rendersubmit_semaphores[currentFlight];\n\tvk::Fence& fence = render_fences[currentFlight];\n\n\t[[maybe_unused]] vk::Result res;//bruh\n\t\n\tres = core->gpudevice.waitForFences(1,&fence,true,UINT64_MAX);\n\tuint32_t next_swap_image = 0; \n\tres = core->gpudevice.acquireNextImageKHR(swapchain, UINT64_MAX, swapchainavailable_S, VK_NULL_HANDLE, &next_swap_image);\n\t\n\t//resizing\n\tif (res == vk::Result::eErrorOutOfDateKHR || res == vk::Result::eSuboptimalKHR || windowResized == false) {\n\t\twindowResized = true;\n\t\tReCreateSwapchain();\n\t\treturn;\n\t} else if (res != vk::Result::eSuccess) {\n\t\tthrow std::runtime_error(\"swapchain died lol\");\n\t}\n\n\tres = core->gpudevice.resetFences(1, &fence);\t\n\n\tvk::CommandBuffer* commandbuffer_current = &cmdBuffers[currentFlight];\n\tcommandbuffer_current->reset();\n\n\t//running code before draw\n\tFrameInfo currentframe = frames[currentFlight];\n\ttick = (tick + 0.0001f);\n\tif (tick>3.14159268) tick = 0;\n\n\tWorldData newworlddata;\n\n\tif (scene_draw_target->active_viewport == nullptr) {\n\n\t\tglm::vec3 campos = {0.0f,-2.0f,-10.0f};\n\t\tglm::vec3 center = {0.0f,0.0f,0.0f};\n\t\tglm::mat4 defaultmat = glm::mat4(1.f);\n\n\t\tglm::mat4 rotatemat = glm::rotate(defaultmat,tick*2, glm::vec3(0,1,0));\n\t\tglm::mat4 view = glm::translate(rotatemat, center);\n\n\t\tglm::mat4 offsetview = glm::translate(defaultmat,campos);\n\n\t\tglm::mat4 projection = glm::perspective(glm::radians(70.f), 1700.f / 900.f, 0.1f, 200.0f);\n\t\tprojection[1][1] *= -1;\n\n\t\tnewworlddata.viewproj = projection * (offsetview*view);\n\t} else {\n\t\tglm::mat4 projection = glm::perspective(glm::radians(70.f), 1700.f / 900.f, 0.1f, 200.0f);\n\t\tprojection[1][1] *= -1;\n\n\t\tnewworlddata.viewproj = projection * scene_draw_target->active_viewport->transform;\n\t}\n\n\n\tvoid* data;\n\tvmaMapMemory(vallocator, currentframe.cameraBuffer.allocation, &data);\n\tmemcpy(data, &newworlddata, sizeof(WorldData));\n\tvmaUnmapMemory(vallocator, currentframe.cameraBuffer.allocation);\n\n\tvoid* objectdata;\n\tvmaMapMemory(vallocator, currentframe.objectdataBuffer.allocation, &objectdata);\n\n\t//ADD OBJECT DATA INTO BUFFER\n\t\n\tGPUObjectData* objdata_mapped = (GPUObjectData*)objectdata;\n\t\n\tfor (size_t i = 0; i < scene_draw_target->objects.size(); i++) {\n\t\tobjdata_mapped[i].transform = scene_draw_target->objects[i]->transform;\n\t\tobjdata_mapped[i].colour = scene_draw_target->objects[i]->colour;\n\t}\n\n\tvmaUnmapMemory(vallocator, currentframe.objectdataBuffer.allocation);\n\n\tvk::ClearValue clearcol{};\n\tclearcol.color = vk::ClearColorValue(std::array<float, 4>({{0.1f, 0.1f, 0.1f, 1.0f}}));\n\n\tvk::ClearValue depthclearcol{};\n\tdepthclearcol.depthStencil.depth = 1.0f;\n\tvk::ClearValue clearvalues[2] = {clearcol,depthclearcol};\n\n\tvk::Rect2D renderrect;\n\trenderrect.extent = swapchainExtent;\n\n\tvk::CommandBufferBeginInfo commandbegininfo{};\n\tvk::RenderPassBeginInfo begininfo{};\n\tbegininfo.renderPass = renderpass;\n\tbegininfo.framebuffer = swapchainFramebuffer[next_swap_image];\n\tbegininfo.renderArea = renderrect;\n\tbegininfo.clearValueCount = 2;\n\tbegininfo.pClearValues = &clearvalues[0];\n\n\tshadowdraw(&currentframe);\n\n\tcommandbuffer_current->begin(commandbegininfo);\n\tcommandbuffer_current->beginRenderPass(begininfo, vk::SubpassContents::eInline);\n\n\tvk::Viewport vp;\n\tvp.width = (float) swapchainExtent.width;\n\tvp.height = (float) swapchainExtent.height;\n\tvp.maxDepth = 1.0f;\n\tcommandbuffer_current->setViewport(0, 1, &vp);\n\tcommandbuffer_current->setScissor(0, 1, &renderrect);\n\t\n\tMaterial* oldmaterial = nullptr;\n\tMesh* oldmesh = nullptr;\n\n\t//std::cout << \"beginning render\" << std::endl;\n\n\tfor (size_t i = 0; i < scene_draw_target->objects.size(); i++) {\n\t\tObject* obj = scene_draw_target->objects[i];\n\t\t//std::cout << obj->name << std::endl;\n\t\tif (obj->mesh != nullptr) {\n\t\t\tif (oldmaterial != obj->material) {\n\t\t\t\t//bind new material\n\t\t\t\t\n\t\t\t\tif (obj->material != nullptr) {\n\t\t\t\t\t//std::cout << \"textured\" << std::endl;\n\t\t\t\t\tcommandbuffer_current->bindPipeline(vk::PipelineBindPoint::eGraphics,obj->material->gpupipeline);\n\t\t\t\t\t\n\t\t\t\t\tcommandbuffer_current->bindDescriptorSets(\n\t\t\t\t\t\tvk::PipelineBindPoint::eGraphics,\n\t\t\t\t\t\tpipelineLayout_textured,\n\t\t\t\t\t\t1,1,\n\t\t\t\t\t\t&obj->material->tex.descriptor,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tnullptr\n\t\t\t\t\t);\n\n\t\t\t\t\tcommandbuffer_current->bindDescriptorSets(\n\t\t\t\t\t\tvk::PipelineBindPoint::eGraphics,\n\t\t\t\t\t\tpipelineLayout_textured,\n\t\t\t\t\t\t0,1,\n\t\t\t\t\t\t&currentframe.descriptor,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tnullptr\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\tcommandbuffer_current->bindDescriptorSets(\n\t\t\t\t\t\tvk::PipelineBindPoint::eGraphics,\n\t\t\t\t\t\tpipelineLayout_textured,\n\t\t\t\t\t\t2,1,\n\t\t\t\t\t\t&currentframe.objectdescriptor,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tnullptr\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\t\t\t\t\t//std::cout << \"untextured\" << std::endl;\n\t\t\t\t\tcommandbuffer_current->bindPipeline(vk::PipelineBindPoint::eGraphics,graphicsPipeline_untextured);\n\t\t\t\t\t\n\t\t\t\t\tcommandbuffer_current->bindDescriptorSets(\n\t\t\t\t\t\tvk::PipelineBindPoint::eGraphics,\n\t\t\t\t\t\tpipelineLayout_untextured,\n\t\t\t\t\t\t0,1,\n\t\t\t\t\t\t&currentframe.descriptor,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tnullptr\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\tcommandbuffer_current->bindDescriptorSets(\n\t\t\t\t\t\tvk::PipelineBindPoint::eGraphics,\n\t\t\t\t\t\tpipelineLayout_untextured,\n\t\t\t\t\t\t2,1,\n\t\t\t\t\t\t&currentframe.objectdescriptor,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tnullptr\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\toldmaterial = obj->material;\n\n\t\t\t} else {\n\t\t\t\t//std::cout << \"same material\" << std::endl;\n\t\t\t}\n\t\t\tif (oldmesh != obj->mesh) {\n\t\t\t\tvk::DeviceSize offset = 0;\n\t\t\t\tcommandbuffer_current->bindVertexBuffers(0,1,&obj->mesh->vertexBuffer.buffer,&offset);\n\t\t\t\toldmesh = obj->mesh;\n\t\t\t}else {\n\t\t\t\t//std::cout << \"same mesh\" << std::endl;\n\t\t\t}\n\t\t\t//std::cout << \"draw\" << std::endl;\n\t\t\tcommandbuffer_current->draw(obj->mesh->vertices.size(),1,0,i);\n\t\t}\n\t}\t\n\n\tcommandbuffer_current->endRenderPass();\n\tcommandbuffer_current->end();\n\n\tvk::PipelineStageFlags wstages[] = {vk::PipelineStageFlagBits::eColorAttachmentOutput};\n\n\tvk::SubmitInfo sinfo{};\n\tsinfo.waitSemaphoreCount = 1;\n\tsinfo.pWaitSemaphores = &swapchainavailable_S;\n\tsinfo.pWaitDstStageMask = wstages;\n\n\tsinfo.commandBufferCount = 1;\n\tsinfo.pCommandBuffers = commandbuffer_current;\n\n\tsinfo.signalSemaphoreCount = 1;\n\tsinfo.pSignalSemaphores = &rendersubmit_S;\n\n\tres = core->graphicsQueue.submit(1, &sinfo, fence);\n\n\tvk::PresentInfoKHR presentinfo{};\n\tpresentinfo.waitSemaphoreCount = 1;\n\tpresentinfo.pWaitSemaphores = &rendersubmit_S;\n\tpresentinfo.swapchainCount = 1;\n\tpresentinfo.pSwapchains = &swapchain;\n\tpresentinfo.pImageIndices = &next_swap_image;\n\n\tres = core->presentQueue.presentKHR(presentinfo);\n\t\n\tcurrentFlight = (currentFlight+1)%frameFlightNum;\n}\n\nvoid MainEngine::SCENE_cleanup(Scene* sc) {\n\n\tfor (std::pair<std::string,Material> material : sc->materials) {\n\t\tdestroy_allocated_image(&material.second.tex.image);\n\t\tdestroy_texture(&material.second.tex);\n\t}\n\n\tfor (std::pair<std::string,Mesh> mesh : sc->meshes) {\n\t\tdestroy_allocated_buffer(&mesh.second.vertexBuffer);\n\t}\n\n}\n\nvoid MainEngine::SCENE_set_active(Scene* sc) {\n\tscene_draw_target = sc;\n}\n\nvoid MainEngine::SCENE_set_viewport(Scene* sc, Object* obj) {\n\tsc->active_viewport = obj;\n}\n\nvoid MainEngine::cleanup() {\n\tcore->gpudevice.waitIdle();\n\n\tdestroy_allocated_image(&depthImage);\n\n\tSCENE_cleanup(scene_draw_target);\n\n\t//used before, when testing on hardcoded images directly\n\t//destroy_allocated_image(&testimage);\n\t//destroy_allocated_buffer(&testmesh->vertexBuffer);\n\t//destroy_texture(&testtexture);\n\n    core->gpudevice.destroySwapchainKHR(swapchain, nullptr);\n\n    for (auto thing : swapchainImageViews) { //lol\n    \tcore->gpudevice.destroyImageView(thing, nullptr);\n    }\n \tfor (auto thing : swapchainFramebuffer) {\n    \tcore->gpudevice.destroyFramebuffer(thing, nullptr);\n    }\n\n    for (uint32_t i = 0; i<frameFlightNum; i++) {\n    \tcore->gpudevice.destroySemaphore(swapimageavailable_semaphores[i], nullptr);\n\t\tcore->gpudevice.destroySemaphore(rendersubmit_semaphores[i], nullptr);\n\t\tcore->gpudevice.destroyFence(render_fences[i], nullptr);\n\t\tdestroy_allocated_buffer(&frames[i].cameraBuffer);\t\n\t\tdestroy_allocated_buffer(&frames[i].objectdataBuffer);\t\n\n\t\tcore->gpudevice.destroySampler(frames[i].shadows.sampler, nullptr);\n\t\tcore->gpudevice.destroyFramebuffer(frames[i].shadows.framebuffer, nullptr);\n\t\tdestroy_allocated_image(&frames[i].shadows.depthImage);\n    }\n\n    core->gpudevice.destroyFence(uploadFence, nullptr);\n\tcore->gpudevice.destroyCommandPool(uploadCmdPool, nullptr);\n    \n    core->gpudevice.destroyCommandPool(cmdPool, nullptr);\n    core->gpudevice.destroyRenderPass(renderpass, nullptr);\n\n    core->gpudevice.destroyDescriptorPool(descriptorPool, nullptr);\n\tcore->gpudevice.destroyDescriptorSetLayout(descriptorSetLayout, nullptr);\n\tcore->gpudevice.destroyDescriptorSetLayout(descriptorSetLayout_objectdata, nullptr);\n\tcore->gpudevice.destroyDescriptorSetLayout(descriptorSetLayout_texture, nullptr);\n\t\n    core->gpudevice.destroyPipelineLayout(pipelineLayout_textured, nullptr);\n    core->gpudevice.destroyPipeline(graphicsPipeline_textured, nullptr);\n\n    core->gpudevice.destroyPipelineLayout(pipelineLayout_untextured, nullptr);\n    core->gpudevice.destroyPipeline(graphicsPipeline_untextured, nullptr);\n\n\t//vmaDestroyBuffer(vallocator, testmesh->vertexBuffer.buffer, testmesh->vertexBuffer.allocation);\n    vmaDestroyAllocator(vallocator);\n\n    core->cleanup();\n    delete core;\n}\n\nbool MainEngine::StepEngine() {\n\tif (glfwWindowShouldClose(core->window)) {\n\t\treturn false;\n\t} else {\n\t\tglfwPollEvents();\n        step();\n        draw();\n\t\treturn true;\n\t}\n}\n\nMainEngine::MainEngine(uint32_t WIDTH, uint32_t HEIGHT){\n\tstd::cout << \"making engine\" << std::endl;\n\n\tcore = new VulkanCore(WIDTH,HEIGHT);\n\tqueueFamilies = &core->queueFamilies;\n\tglfwSetWindowUserPointer(core->window,this);\n\tglfwSetFramebufferSizeCallback(core->window,WindowResizedCallback);\n\n\tCreateAllocator();\n\tCreateSwapchain();\n\tCreateRenderpass();\n\tCreateFramebuffer();\n\tCreateCommandpool();\n\n\tCreateDescriptorSets();\n\tCreateSyncObjects();\n\tstd::cout << \"graphics pipeline\" << std::endl;\n\tCreateGraphicsPipeline();\n\tstd::cout << \"shadow map stuff\" << std::endl;\n\tCreateShadowmap();\n\n\tinitial();\n\n\tstd::cout << \"done\" << std::endl;\n\n}",
			"file": "src/engine.cpp",
			"file_size": 62630,
			"file_write_time": 133230707547647427,
			"redo_stack":
			[
				[
					567,
					1,
					"left_delete",
					null,
					"AQAAAA3hAAAAAAAAcOEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADeEAAAAAAAAN4QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 58608,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAAH5uAAAAAAAAfm4AAAAAAAABAAAACg",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8BAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8BAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/bgAAAAAAAH9uAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					2,
					"left_delete",
					null,
					"AgAAAEISAAAAAAAAQhIAAAAAAAAHAAAARlVDS0lOR0ESAAAAAAAAQRIAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAQhIAAAAAAABJEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAb1AAAAAAAABvUAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAALoTAAAAAAAAuhMAAAAAAAAHAAAAZnVja2luZw",
					"AgAAAAAAAAABAAAAuhMAAAAAAADBEwAAAAAAAAAAAAAAAPC/AQAAAAEAAAAT1AAAAAAAABPUAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					6,
					"left_delete",
					null,
					"BgAAAK0TAAAAAAAArRMAAAAAAAAUAAAAZ3Vlc3MuIGplc3VzICBjaHJpc3SsEwAAAAAAAKwTAAAAAAAAAQAAACCrEwAAAAAAAKsTAAAAAAAAAQAAAGmqEwAAAAAAAKoTAAAAAAAAAQAAACCpEwAAAAAAAKkTAAAAAAAAAQAAACyoEwAAAAAAAKgTAAAAAAAAAQAAAG4",
					"AgAAAAAAAAABAAAAwRMAAAAAAACtEwAAAAAAAAAAAAAAAPC/AQAAAAEAAAAM1AAAAAAAAAzUAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					2,
					"left_delete",
					null,
					"AgAAAJYTAAAAAAAAlhMAAAAAAAASAAAACXlvdSBsaXZlIHlvdSBsZWFylRMAAAAAAACVEwAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAqBMAAAAAAACWEwAAAAAAAAAAAAAAAPC/AQAAAAEAAADz0wAAAAAAAPPTAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAFAJAAAAAAAAUAkAAAAAAAAVAAAAT0JKRUNUIFJFTEFURUQgU0hJVCAo",
					"AgAAAAAAAAABAAAAZQkAAAAAAABQCQAAAAAAAAAAAAAAAPC/AQAAAAEAAADg0wAAAAAAAODTAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"left_delete",
					null,
					"AQAAAJAJAAAAAAAAkAkAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAkQkAAAAAAACRCQAAAAAAAAAAAAAAAPC/AQAAAAEAAADL0wAAAAAAAMvTAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					2,
					"left_delete",
					null,
					"AgAAAGUKAAAAAAAAZQoAAAAAAABNAQAACi8vCgovL1NDRU5FIENPTlRST0xTCi8qCnZvaWQgU2NlbmU6Ok5ld19NYXRlcmlhbChjb25zdCBjaGFyKiB0ZXh0dXJlcGF0aCwgc3RkOjpzdHJpbmcgbmFtZSkgewoJLy9tYXQKCWF1dG8gZmluZF9tYXQgPSBtYXRlcmlhbHMuZmluZChuYW1lKTsKCWlmIChmaW5kX21hdCA9PSBtYXRlcmlhbHMuZW5kKCkpIHsKCQlNYXRlcmlhbCBuZXdtYXRlcmlhbDsJCgkJbmV3bWF0ZXJpYWwuU2V0dXAodGV4dHVyZXBhdGgpOwoKCQltYXRlcmlhbHNbbmFtZV0gPSBuZXdtYXRlcmlhbDsKCX0gZWxzZSB7CgkJLy9uZXdvYmplY3QubWF0ZXJpYWwgPSAmKCpmaW5kX21hdCkuc2Vjb25kOwoJfQoKfSovZAoAAAAAAABkCgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAsgsAAAAAAABlCgAAAAAAAAAAAAAAAPC/AQAAAAEAAADK0wAAAAAAAMrTAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAABsJAAAAAAAAGwkAAAAAAAAvAAAACgkvL21lc2guTG9hZChtZXNoX3BhdGgpOwoJLy91cGxvYWRfbWVzaChtZXNoKTs",
					"AgAAAAAAAAABAAAASgkAAAAAAAAbCQAAAAAAAAAAAAAAAPC/AQAAAAEAAAB80gAAAAAAAHzSAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"left_delete",
					null,
					"AQAAAJIIAAAAAAAAkggAAAAAAABDAAAACgkvL3RleCA9IGNyZWF0ZV90ZXh0dXJlKCZ0ZXgpOwoJLy9ncHVwaXBlbGluZSA9ICZncmFwaGljc1BpcGVsaW5lOw",
					"AgAAAAAAAAABAAAA1QgAAAAAAACSCAAAAAAAAAAAAAAAAPC/AQAAAAEAAABN0gAAAAAAAE3SAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					2,
					"left_delete",
					null,
					"AgAAAGcIAAAAAAAAZwgAAAAAAAArAAAAZXguaW1hZ2UgPSBsb2FkX3RleHR1cmVfZmlsZSh0ZXh0dXJlX3BhdGgpO2YIAAAAAAAAZggAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAkggAAAAAAABnCAAAAAAAAAAAAAAAAPC/AQAAAAEAAAAK0gAAAAAAAArSAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "texture"
					},
					"BwAAAGYIAAAAAAAAZwgAAAAAAAAAAAAAZwgAAAAAAABoCAAAAAAAAAAAAABoCAAAAAAAAGkIAAAAAAAAAAAAAGkIAAAAAAAAaggAAAAAAAAAAAAAaggAAAAAAABrCAAAAAAAAAAAAABrCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAbQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAZggAAAAAAABmCAAAAAAAAAAAAAAAAPC/AQAAAAEAAADe0QAAAAAAAN7RAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " loading"
					},
					"CAAAAG0IAAAAAAAAbggAAAAAAAAAAAAAbggAAAAAAABvCAAAAAAAAAAAAABvCAAAAAAAAHAIAAAAAAAAAAAAAHAIAAAAAAAAcQgAAAAAAAAAAAAAcQgAAAAAAAByCAAAAAAAAAAAAAByCAAAAAAAAHMIAAAAAAAAAAAAAHMIAAAAAAAAdAgAAAAAAAAAAAAAdAgAAAAAAAB1CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAbQgAAAAAAABtCAAAAAAAAAAAAAAAAPC/AQAAAAEAAADl0QAAAAAAAOXRAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					3,
					"left_delete",
					null,
					"AwAAALYIAAAAAAAAtggAAAAAAAAFAAAAKioqKiq1CAAAAAAAALUIAAAAAAAAAQAAACq0CAAAAAAAALQIAAAAAAAAAQAAACo",
					"AgAAAAAAAAABAAAAuwgAAAAAAAC2CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADt0QAAAAAAAO3RAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAHUIAAAAAAAAdggAAAAAAAAAAAAAdggAAAAAAAB3CAAAAAAAAAAAAAB3CAAAAAAAAHgIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAdQgAAAAAAAB1CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADm0QAAAAAAAObRAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " needed"
					},
					"BwAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB6CAAAAAAAAAAAAAB6CAAAAAAAAHsIAAAAAAAAAAAAAHsIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAAB9CAAAAAAAAAAAAAB9CAAAAAAAAH4IAAAAAAAAAAAAAH4IAAAAAAAAfwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADp0QAAAAAAAOnRAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " fr"
					},
					"BAAAAHUIAAAAAAAAdggAAAAAAAAAAAAAdggAAAAAAAB2CAAAAAAAAAoAAAAgaWYgbmVlZGVkdggAAAAAAAB3CAAAAAAAAAAAAAB3CAAAAAAAAHgIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwgAAAAAAAB1CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADw0QAAAAAAAPDRAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAAHcIAAAAAAAAdwgAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADp0QAAAAAAAOnRAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "pr"
					},
					"AgAAAHcIAAAAAAAAeAgAAAAAAAAAAAAAeAgAAAAAAAB5CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAdwgAAAAAAAB3CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADo0QAAAAAAAOjRAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					2,
					"left_delete",
					null,
					"AgAAAHgIAAAAAAAAeAgAAAAAAAABAAAAcncIAAAAAAAAdwgAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAeQgAAAAAAAB5CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADq0QAAAAAAAOrRAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAHcIAAAAAAAAeAgAAAAAAAAAAAAAeAgAAAAAAAB5CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAdwgAAAAAAAB3CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADo0QAAAAAAAOjRAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " future"
					},
					"BwAAAHkIAAAAAAAAeggAAAAAAAAAAAAAeggAAAAAAAB7CAAAAAAAAAAAAAB7CAAAAAAAAHwIAAAAAAAAAAAAAHwIAAAAAAAAfQgAAAAAAAAAAAAAfQgAAAAAAAB+CAAAAAAAAAAAAAB+CAAAAAAAAH8IAAAAAAAAAAAAAH8IAAAAAAAAgAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAeQgAAAAAAAB5CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADq0QAAAAAAAOrRAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"paste",
					null,
					"AQAAAL8IAAAAAAAAyggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAvwgAAAAAAAC/CAAAAAAAAAAAAAAAAPC/AQAAAAEAAADx0QAAAAAAAPHRAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					2,
					"left_delete",
					null,
					"AgAAAHwGAAAAAAAAfAYAAAAAAACkAQAACgoKCS8vdmVydGljZXMucmVzaXplKDMpCgkvL3ZlcnRpY2VzWzBdLnBvcyA9IHswLjBmLCAwLjBmLCAwLjBmfTsKCS8vdmVydGljZXNbMV0ucG9zID0gezAuMGYsIDAuNWYsIDAuMGZ9OwoJLy92ZXJ0aWNlc1syXS5wb3MgPSB7MC41ZiwgMC4wZiwgMC4wZn07CgoJLy9nbG06Om1hdDQgcHJvamVjdGlvbiA9IGdsbTo6cGVyc3BlY3RpdmUoZ2xtOjpyYWRpYW5zKDcwLmYpLCAxNzAwLmYgLyA5MDAuZiwgMC4xZiwgMjAwLjBmKTsKCS8vcHJvamVjdGlvblsxXVsxXSAqPSAtMTsKCgkvL3ZlcnRpY2VzWzBdLnBvcyAqPSBwcm9qZWN0aW9uOwoJLy92ZXJ0aWNlc1sxXS5wb3MgKj0gcHJvamVjdGlvbjsKCS8vdmVydGljZXNbMl0ucG9zICo9CXByb2plY3Rpb247CgogICAvLyB0ZXN0LmxvYWRfZnJvbV9maWxlKCJhc3NldHMvY3ViZS5vYmoiKTsKewYAAAAAAAB7BgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAIAgAAAAAAAB8BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAD80QAAAAAAAPzRAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					2,
					"left_delete",
					null,
					"AgAAAIUAAAAAAAAAhQAAAAAAAAAHAAAACi8vdGVzdIQAAAAAAAAAhAAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAjAAAAAAAAACFAAAAAAAAAAAAAAAAAPC/AQAAAAEAAABX0AAAAAAAAFfQAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"left_delete",
					null,
					"AQAAAG0AAAAAAAAAbQAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/AQAAAAEAAABP0AAAAAAAAE/QAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					2,
					"left_delete",
					null,
					"AgAAANAJAAAAAAAA0AkAAAAAAAA4AAAACgl9IGVsc2UgewoJCS8vbmV3b2JqZWN0Lm1hdGVyaWFsID0gJigqZmluZF9tYXQpLnNlY29uZDvPCQAAAAAAAM8JAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAACAoAAAAAAADQCQAAAAAAAAAAAAAAAPC/AQAAAAEAAABO0AAAAAAAAE7QAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAKkJAAAAAAAAqQkAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAqgkAAAAAAACqCQAAAAAAAAAAAAAAAPC/AQAAAAEAAAAV0AAAAAAAABXQAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					2,
					"left_delete",
					null,
					"AgAAAEsKAAAAAAAASwoAAAAAAAA8AAAACS8vT2JqZWN0IG9iaiA9IHNjLT5OZXdfT2JqZWN0KG1lc2hwYXRoLm5hbWUsbWF0ZXJpYWxfbmFtZSk7SgoAAAAAAABKCgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAhwoAAAAAAABLCgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAU0AAAAAAAABTQAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					2,
					"left_delete",
					null,
					"AgAAAMIQAAAAAAAAwhAAAAAAAAApAAAACQkvL2VuZ2luZV90YXJnZXQtPnVwbG9hZF9tZXNoKG5ld21lc2gpOwrBEAAAAAAAAMEQAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAA6xAAAAAAAADCEAAAAAAAAAAAAAAAAPC/AQAAAAEAAADXzwAAAAAAANfPAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMEQAAAAAAAAwhAAAAAAAAAAAAAAwhAAAAAAAADEEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwRAAAAAAAADBEAAAAAAAAAAAAAAAAPC/AQAAAAEAAACtzwAAAAAAAK3PAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					3,
					"left_delete",
					null,
					"BAAAAJYSAAAAAAAAlhIAAAAAAABnAQAALy8KCgovL21lc2ggPSBuZXcgTWVzaCgpOwovL3Rlc3RtZXNoLT5Mb2FkKCJhc3NldHMvdGVzdGFzc2V0Lm9iaiIpOwovL3Rlc3RpbWFnZSA9IGxvYWRfdGV4dHVyZV9maWxlKCJhc3NldHMvdGV4LnBuZyIpOwovL3Rlc3R0ZXh0dXJlID0gY3JlYXRlX3RleHR1cmVfZnJvbV9hbGxpbWFnZSgmdGVzdGltYWdlKTsKCi8vdGVzdG1lc2gtPnZlcnRpY2VzLnJlc2l6ZSgzKTsKLy90ZXN0bWVzaC0+dmVydGljZXNbMF0ucG9zID0gezAuMGYsIDAuMGYsIDAuMGZ9OwovL3Rlc3RtZXNoLT52ZXJ0aWNlc1sxXS5wb3MgPSB7MC4wZiwgMC41ZiwgMC4wZn07Ci8vdGVzdG1lc2gtPnZlcnRpY2VzWzJdLnBvcyA9IHswLjVmLCAwLjBmLCAwLjBmfTvCEAAAAAAAAMIQAAAAAAAAAgAAAAkJkxIAAAAAAACTEgAAAAAAAAEAAAAKkhIAAAAAAACSEgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAA/RMAAAAAAACWEgAAAAAAAAAAAAAAAPC/AQAAAAEAAACwzwAAAAAAALDPAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYeAAAAAAAARx4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARh4AAAAAAABGHgAAAAAAAAAAAAAAAPC/AQAAAAEAAABFzgAAAAAAAEXOAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					3,
					"left_delete",
					null,
					"AwAAAM8hAAAAAAAAzyEAAAAAAAABAAAACs4hAAAAAAAAziEAAAAAAAABAAAACs0hAAAAAAAAzSEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAA0CEAAAAAAADQIQAAAAAAAAAAAAAAAPC/AQAAAAEAAABGzgAAAAAAAEbOAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAAkwAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAALMAAAAAAAAAAAAAALMAAAAAAAAAwwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABDzgAAAAAAAEPOAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwwAAAAAAAADTAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADDAAAAAAAAAMMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABGzgAAAAAAAEbOAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "UNUSED"
					},
					"BgAAAA0wAAAAAAAADjAAAAAAAAAAAAAADjAAAAAAAAAPMAAAAAAAAAAAAAAPMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAETAAAAAAAAAAAAAAETAAAAAAAAASMAAAAAAAAAAAAAASMAAAAAAAABMwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADTAAAAAAAAANMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABHzgAAAAAAAEfOAAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					6,
					"left_delete",
					null,
					"BgAAABIwAAAAAAAAEjAAAAAAAAABAAAARBEwAAAAAAAAETAAAAAAAAABAAAARRAwAAAAAAAAEDAAAAAAAAABAAAAUw8wAAAAAAAADzAAAAAAAAABAAAAVQ4wAAAAAAAADjAAAAAAAAABAAAATg0wAAAAAAAADTAAAAAAAAABAAAAVQ",
					"AgAAAAAAAAABAAAAEzAAAAAAAAATMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABNzgAAAAAAAE3OAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					6,
					"left_delete",
					null,
					"BgAAAAwwAAAAAAAADDAAAAAAAAABAAAAIAswAAAAAAAACzAAAAAAAAABAAAALwowAAAAAAAACjAAAAAAAAABAAAALwkwAAAAAAAACTAAAAAAAAABAAAAIAgwAAAAAAAACDAAAAAAAAABAAAAewcwAAAAAAAABzAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAADTAAAAAAAAANMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABHzgAAAAAAAEfOAAAAAAAAAAAAAAAA8L8"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAAcwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAJMAAAAAAAAAAAAAAJMAAAAAAAAAowAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAABzAAAAAAAAAHMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABBzgAAAAAAAEHOAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": " UNUSED,"
					},
					"CAAAAAowAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADjAAAAAAAAAAAAAADjAAAAAAAAAPMAAAAAAAAAAAAAAPMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAETAAAAAAAAAAAAAAETAAAAAAAAASMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACjAAAAAAAAAKMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABEzgAAAAAAAETOAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " REMOVE"
					},
					"BwAAABIwAAAAAAAAEzAAAAAAAAAAAAAAEzAAAAAAAAAUMAAAAAAAAAAAAAAUMAAAAAAAABUwAAAAAAAAAAAAABUwAAAAAAAAFjAAAAAAAAAAAAAAFjAAAAAAAAAXMAAAAAAAAAAAAAAXMAAAAAAAABgwAAAAAAAAAAAAABgwAAAAAAAAGTAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAEjAAAAAAAAASMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABMzgAAAAAAAEzOAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": " LATER"
					},
					"BgAAABkwAAAAAAAAGjAAAAAAAAAAAAAAGjAAAAAAAAAbMAAAAAAAAAAAAAAbMAAAAAAAABwwAAAAAAAAAAAAABwwAAAAAAAAHTAAAAAAAAAAAAAAHTAAAAAAAAAeMAAAAAAAAAAAAAAeMAAAAAAAAB8wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGTAAAAAAAAAZMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABTzgAAAAAAAFPOAAAAAAAAAAAAAAAA8L8"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": "now"
					},
					"BAAAAAswAAAAAAAADDAAAAAAAAAAAAAADDAAAAAAAAAMMAAAAAAAAAYAAABVTlVTRUQMMAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADjAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACzAAAAAAAAARMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABZzgAAAAAAAFnOAAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4wAAAAAAAADzAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADjAAAAAAAAAOMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABWzgAAAAAAAFbOAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					3,
					"left_delete",
					null,
					"AwAAAA4wAAAAAAAADjAAAAAAAAABAAAAIA0wAAAAAAAADTAAAAAAAAABAAAAdwwwAAAAAAAADDAAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAADzAAAAAAAAAPMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABXzgAAAAAAAFfOAAAAAAAAAAAAAAAA8L8"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "NOW"
					},
					"AwAAAAwwAAAAAAAADTAAAAAAAAAAAAAADTAAAAAAAAAOMAAAAAAAAAAAAAAOMAAAAAAAAA8wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADDAAAAAAAAAMMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABUzgAAAAAAAFTOAAAAAAAAAAAAAAAA8L8"
				],
				[
					231,
					4,
					"left_delete",
					null,
					"BAAAAA4wAAAAAAAADjAAAAAAAAABAAAAVw0wAAAAAAAADTAAAAAAAAABAAAATwwwAAAAAAAADDAAAAAAAAABAAAATgswAAAAAAAACzAAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAADzAAAAAAAAAPMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABXzgAAAAAAAFfOAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "NOW"
					},
					"AwAAAAswAAAAAAAADDAAAAAAAAAAAAAADDAAAAAAAAANMAAAAAAAAAAAAAANMAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACzAAAAAAAAALMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABTzgAAAAAAAFPOAAAAAAAAAAAAAAAA8L8"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": " UNUSED"
					},
					"BwAAAA4wAAAAAAAADzAAAAAAAAAAAAAADzAAAAAAAAAQMAAAAAAAAAAAAAAQMAAAAAAAABEwAAAAAAAAAAAAABEwAAAAAAAAEjAAAAAAAAAAAAAAEjAAAAAAAAATMAAAAAAAAAAAAAATMAAAAAAAABQwAAAAAAAAAAAAABQwAAAAAAAAFTAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADjAAAAAAAAAOMAAAAAAAAAAAAAAAAPC/AQAAAAEAAABWzgAAAAAAAFbOAAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"left_delete",
					null,
					"AQAAAOBCAAAAAAAA4EIAAAAAAAAyAAAACS8vc3RkOjpjb3V0IDw8ICJ0aGUgY2hhaW4gaW1hZ3JlcyIgPDwgc3RkOjplbmRsOwo",
					"AgAAAAAAAAABAAAAEkMAAAAAAADgQgAAAAAAAAAAAAAAAPC/AQAAAAEAAABdzgAAAAAAAF3OAAAAAAAAAAAAAAAA8L8"
				],
				[
					247,
					2,
					"left_delete",
					null,
					"AgAAAHBCAAAAAAAAcEIAAAAAAAArAAAACS8vc3RkOjpjb3V0IDw8ICJ0aGUgY2hhaW4iIDw8IHN0ZDo6ZW5kbDsKCm9CAAAAAAAAb0IAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAm0IAAAAAAABwQgAAAAAAAAAAAAAAAPC/AQAAAAEAAAArzgAAAAAAACvOAAAAAAAAAAAAAAAA8L8"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAG9CAAAAAAAAcEIAAAAAAAAAAAAAcEIAAAAAAABxQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAb0IAAAAAAABvQgAAAAAAAAAAAAAAAPC/AQAAAAEAAAD/zQAAAAAAAP/NAAAAAAAAAAAAAAAA8L8"
				],
				[
					251,
					2,
					"left_delete",
					null,
					"AgAAAHJCAAAAAAAAckIAAAAAAAABAAAAc3FCAAAAAAAAcUIAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAc0IAAAAAAABzQgAAAAAAAAAAAAAAAPC/AQAAAAEAAAABzgAAAAAAAAHOAAAAAAAAAAAAAAAA8L8"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAHFCAAAAAAAAckIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAcUIAAAAAAABxQgAAAAAAAAAAAAAAAPC/AQAAAAEAAAD/zQAAAAAAAP/NAAAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAHFCAAAAAAAAckIAAAAAAAAAAAAAckIAAAAAAAByQgAAAAAAAAEAAABT",
					"AgAAAAAAAAABAAAAckIAAAAAAABxQgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAAzgAAAAAAAADOAAAAAAAAAAAAAAAA8L8"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "image"
					},
					"BQAAAEFGAAAAAAAAQkYAAAAAAAAAAAAAQkYAAAAAAABDRgAAAAAAAAAAAABDRgAAAAAAAERGAAAAAAAAAAAAAERGAAAAAAAARUYAAAAAAAAAAAAARUYAAAAAAABGRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAQUYAAAAAAABBRgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAAzgAAAAAAAADOAAAAAAAAAAAAAAAA8L8"
				],
				[
					267,
					2,
					"indent",
					null,
					"IgAAAAp2AAAAAAAAC3YAAAAAAAAAAAAALXYAAAAAAAAudgAAAAAAAAAAAABZdgAAAAAAAFp2AAAAAAAAAAAAAIV2AAAAAAAAhnYAAAAAAAAAAAAAwXYAAAAAAADCdgAAAAAAAAAAAAD+dgAAAAAAAP92AAAAAAAAAAAAADt3AAAAAAAAPHcAAAAAAAAAAAAAdXcAAAAAAAB2dwAAAAAAAAAAAACcdwAAAAAAAJ13AAAAAAAAAAAAAMB3AAAAAAAAwXcAAAAAAAAAAAAA7ncAAAAAAADvdwAAAAAAAAAAAAAyeAAAAAAAADN4AAAAAAAAAAAAAFR4AAAAAAAAVXgAAAAAAAAAAAAAbHgAAAAAAABteAAAAAAAAAAAAACJeAAAAAAAAIp4AAAAAAAAAAAAAKt4AAAAAAAArHgAAAAAAAAAAAAA73gAAAAAAADweAAAAAAAAAAAAAAKdgAAAAAAAAt2AAAAAAAAAAAAAC52AAAAAAAAL3YAAAAAAAAAAAAAW3YAAAAAAABcdgAAAAAAAAAAAACIdgAAAAAAAIl2AAAAAAAAAAAAAMV2AAAAAAAAxnYAAAAAAAAAAAAAA3cAAAAAAAAEdwAAAAAAAAAAAABBdwAAAAAAAEJ3AAAAAAAAAAAAAHx3AAAAAAAAfXcAAAAAAAAAAAAApHcAAAAAAACldwAAAAAAAAAAAADJdwAAAAAAAMp3AAAAAAAAAAAAAPh3AAAAAAAA+XcAAAAAAAAAAAAAPXgAAAAAAAA+eAAAAAAAAAAAAABgeAAAAAAAAGF4AAAAAAAAAAAAAHl4AAAAAAAAengAAAAAAAAAAAAAl3gAAAAAAACYeAAAAAAAAAAAAAC6eAAAAAAAALt4AAAAAAAAAAAAAP94AAAAAAAAAHkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA/ngAAAAAAAAJdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAFzgAAAAAAAAXOAAAAAAAAAAAAAAAA8L8"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAh2AAAAAAAACXYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACHYAAAAAAAAIdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAnzgAAAAAAACfOAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"reindent",
					null,
					"AQAAAAp2AAAAAAAAC3YAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACnYAAAAAAAAKdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAozgAAAAAAACjOAAAAAAAAAAAAAAAA8L8"
				],
				[
					278,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAAt2AAAAAAAADHYAAAAAAAAAAAAADHYAAAAAAAANdgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAC3YAAAAAAAALdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAApzgAAAAAAACnOAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": "OLD"
					},
					"AwAAAAl2AAAAAAAACnYAAAAAAAAAAAAACnYAAAAAAAALdgAAAAAAAAAAAAALdgAAAAAAAAx2AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACXYAAAAAAAAJdgAAAAAAAAAAAAAAAFJAAQAAAAEAAAArzgAAAAAAACvOAAAAAAAAAAAAAAAA8L8"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": " SAMPLER"
					},
					"CAAAAAx2AAAAAAAADXYAAAAAAAAAAAAADXYAAAAAAAAOdgAAAAAAAAAAAAAOdgAAAAAAAA92AAAAAAAAAAAAAA92AAAAAAAAEHYAAAAAAAAAAAAAEHYAAAAAAAARdgAAAAAAAAAAAAARdgAAAAAAABJ2AAAAAAAAAAAAABJ2AAAAAAAAE3YAAAAAAAAAAAAAE3YAAAAAAAAUdgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADHYAAAAAAAAMdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAuzgAAAAAAAC7OAAAAAAAAAAAAAAAA8L8"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": " CODE"
					},
					"BQAAABR2AAAAAAAAFXYAAAAAAAAAAAAAFXYAAAAAAAAWdgAAAAAAAAAAAAAWdgAAAAAAABd2AAAAAAAAAAAAABd2AAAAAAAAGHYAAAAAAAAAAAAAGHYAAAAAAAAZdgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAFHYAAAAAAAAUdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA2zgAAAAAAADbOAAAAAAAAAAAAAAAA8L8"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABl2AAAAAAAAGnYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGXYAAAAAAAAZdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA7zgAAAAAAADvOAAAAAAAAAAAAAAAA8L8"
				],
				[
					284,
					1,
					"left_delete",
					null,
					"AQAAABl2AAAAAAAAGXYAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAGnYAAAAAAAAadgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA8zgAAAAAAADzOAAAAAAAAAAAAAAAA8L8"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABl2AAAAAAAAGnYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGXYAAAAAAAAZdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA7zgAAAAAAADvOAAAAAAAAAAAAAAAA8L8"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABp2AAAAAAAAG3YAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGnYAAAAAAAAadgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA8zgAAAAAAADzOAAAAAAAAAAAAAAAA8L8"
				],
				[
					287,
					2,
					"left_delete",
					null,
					"AgAAABp2AAAAAAAAGnYAAAAAAAABAAAAIBl2AAAAAAAAGXYAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAG3YAAAAAAAAbdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA9zgAAAAAAAD3OAAAAAAAAAAAAAAAA8L8"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": " F"
					},
					"AgAAABl2AAAAAAAAGnYAAAAAAAAAAAAAGnYAAAAAAAAbdgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGXYAAAAAAAAZdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA7zgAAAAAAADvOAAAAAAAAAAAAAAAA8L8"
				],
				[
					289,
					1,
					"left_delete",
					null,
					"AQAAABp2AAAAAAAAGnYAAAAAAAABAAAARg",
					"AgAAAAAAAAABAAAAG3YAAAAAAAAbdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA9zgAAAAAAAD3OAAAAAAAAAAAAAAAA8L8"
				],
				[
					292,
					2,
					"left_delete",
					null,
					"AgAAAAN2AAAAAAAAA3YAAAAAAAA5AwAACgkJLyogT0xEIFNBTVBMRVIgQ09ERSAKCQkJCgkJCXZrOjpTYW1wbGVyQ3JlYXRlSW5mbyBzYW1wbGVye307CgkJCXNhbXBsZXIubWFnRmlsdGVyID0gdms6OkZpbHRlcjo6ZU5lYXJlc3Q7CgkJCXNhbXBsZXIubWluRmlsdGVyID0gdms6OkZpbHRlcjo6ZU5lYXJlc3Q7CgkJCS8vc2FtcGxlci5hZGRyZXNzTW9kZVUgPSB2azo6U2FtcGxlckFkZHJlc3NNb2RlOjplUmVwZWF0OwoJCQkvL3NhbXBsZXIuYWRkcmVzc01vZGVWID0gdms6OlNhbXBsZXJBZGRyZXNzTW9kZTo6ZVJlcGVhdDsJCgkJCS8vc2FtcGxlci5hZGRyZXNzTW9kZVcgPSB2azo6U2FtcGxlckFkZHJlc3NNb2RlOjplUmVwZWF0OwoKCQkJdGV4LT5zYW1wbGVyID0gY29yZS0+Z3B1ZGV2aWNlLmNyZWF0ZVNhbXBsZXIoc2FtcGxlcik7CgoJCQl2azo6RGVzY3JpcHRvckltYWdlSW5mbyBpbWFnZUluZm97fTsKCQkJaW1hZ2VJbmZvLnNhbXBsZXIgPSB0ZXgtPnNhbXBsZXI7CgkJCWltYWdlSW5mby5pbWFnZVZpZXcgPSB0ZXgtPmltYWdlLmltYWdldmlldzsKCQkJaW1hZ2VJbmZvLmltYWdlTGF5b3V0ID0gdms6OkltYWdlTGF5b3V0OjplU2hhZGVyUmVhZE9ubHlPcHRpbWFsOwoKCQkJdms6OldyaXRlRGVzY3JpcHRvclNldCB3cml0ZXt9OwoJCQl3cml0ZS5kc3RCaW5kaW5nID0gMDsKCQkJd3JpdGUuZGVzY3JpcHRvckNvdW50ID0gMTsKCQkJd3JpdGUuZHN0U2V0ID0gdGV4LT5kZXNjcmlwdG9yOwoJCQl3cml0ZS5kZXNjcmlwdG9yVHlwZSA9IHZrOjpEZXNjcmlwdG9yVHlwZTo6ZUNvbWJpbmVkSW1hZ2VTYW1wbGVyOwoJCQl3cml0ZS5wSW1hZ2VJbmZvID0gJmltYWdlSW5mbzsKCgkJKi8KAnYAAAAAAAACdgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAPHkAAAAAAAADdgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA8zgAAAAAAADzOAAAAAAAAAAAAAAAA8L8"
				],
				[
					298,
					3,
					"left_delete",
					null,
					"AwAAAO51AAAAAAAA7nUAAAAAAAAUAAAACQkvL3dyaXRlIGFsbG9jYXRpb27tdQAAAAAAAO11AAAAAAAAAQAAAArsdQAAAAAAAOx1AAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAnYAAAAAAADudQAAAAAAAAAAAAAAAPC/AQAAAAEAAAACywAAAAAAAALLAAAAAAAAAAAAAAAA8L8"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOx1AAAAAAAA7XUAAAAAAAAAAAAA7XUAAAAAAADvdQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA7HUAAAAAAADsdQAAAAAAAAAAAAAAAPC/AQAAAAEAAADsygAAAAAAAOzKAAAAAAAAAAAAAAAA8L8"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAJurAAAAAAAAnKsAAAAAAAAAAAAA7XUAAAAAAADtdQAAAAAAAAIAAAAJCZqrAAAAAAAAm6sAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAm6sAAAAAAACbqwAAAAAAAAAAAAAAAPC/AQAAAAEAAADvygAAAAAAAO/KAAAAAAAAAAAAAAAA8L8"
				],
				[
					319,
					2,
					"left_delete",
					null,
					"AgAAAFisAAAAAAAAWKwAAAAAAAABAAAAClesAAAAAAAAV6wAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAWawAAAAAAABYrAAAAAAAAAAAAAAAAPC/AQAAAAEAAADvygAAAAAAAO/KAAAAAAAAAAAAAAAA8L8"
				],
				[
					322,
					1,
					"reindent",
					null,
					"AQAAAPWrAAAAAAAA9qsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA9asAAAAAAAD1qwAAAAAAAAAAAAAAAPC/AQAAAAEAAADtygAAAAAAAO3KAAAAAAAAAAAAAAAA8L8"
				],
				[
					325,
					2,
					"left_delete",
					null,
					"AwAAAPmrAAAAAAAA+asAAAAAAAABAAAAL/WrAAAAAAAA9asAAAAAAAABAAAACferAAAAAAAA96sAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAA+qsAAAAAAAD6qwAAAAAAAAAAAAAAAPC/AQAAAAEAAADuygAAAAAAAO7KAAAAAAAAAAAAAAAA8L8"
				],
				[
					330,
					2,
					"left_delete",
					null,
					"AgAAABqsAAAAAAAAGqwAAAAAAAABAAAALxmsAAAAAAAAGawAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAG6wAAAAAAAAbrAAAAAAAAAAAAAAAAPC/AQAAAAEAAADrygAAAAAAAOvKAAAAAAAAAAAAAAAA8L8"
				],
				[
					333,
					2,
					"left_delete",
					null,
					"AgAAAFasAAAAAAAAVqwAAAAAAAABAAAAL1WsAAAAAAAAVawAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAV6wAAAAAAABXrAAAAAAAAAAAAAAAAPC/AQAAAAEAAADpygAAAAAAAOnKAAAAAAAAAAAAAAAA8L8"
				],
				[
					363,
					2,
					"left_delete",
					null,
					"AgAAAPWrAAAAAAAA9asAAAAAAAB2AwAACgl0ZXN0c2NlbmUuZW5naW5lX3RhcmdldCA9ICZ0aGlzOwoJdGVzdHNjZW5lLk5ld19NYXRlcmlhbCgiYXNzZXRzL3RleC5wbmciLCAiU21pbGVUZXh0dXJlIik7CgoJU0NFTkVfbmV3X21hdGVyaWFsKCZ0ZXN0c2NlbmUsImFzc2V0cy90ZXgucG5nIiwgIlNtaWxlVGV4dHVyZSIpOwoJLy9TQ0VORV9uZXdfbWF0ZXJpYWwoJnRlc3RzY2VuZSwiYXNzZXRzL3RhYmxldGV4dHVyZS5wbmciLCAiVGFibGVfVGV4dHVyZSIpOwoKCS8vdGVzdG9iamVjdCA9IFNDRU5FX25ld19vYmplY3QoJnRlc3RzY2VuZSwiYXNzZXRzL2N1YmUub2JqIiwgIkN1YmUiLCAiU21pbGVUZXh0dXJlIik7CiAgLy8gIFNDRU5FX25ld19vYmplY3QoJnRlc3RzY2VuZSwiYXNzZXRzL3RhYmxlLm9iaiIsICJUZXN0QXNzZXQiLCAiVGFibGVfVGV4dHVyZSIpOwogIC8vICBTQ0VORV9uZXdfb2JqZWN0KCZ0ZXN0c2NlbmUsImFzc2V0cy9iYWxsLm9iaiIsICJUZXN0QXNzZXQyIiwgIm5vbmUiKTsKCgoKLy8JdGVzdG1lc2ggPSBuZXcgTWVzaCgpOwoJLy90ZXN0bWVzaC0+TG9hZCgiYXNzZXRzL3Rlc3Rhc3NldC5vYmoiKTsKCgkvL3Rlc3RpbWFnZSA9IGxvYWRfdGV4dHVyZV9maWxlKCJhc3NldHMvdGV4LnBuZyIpOwoJLy90ZXN0dGV4dHVyZSA9IGNyZWF0ZV90ZXh0dXJlX2Zyb21fYWxsaW1hZ2UoJnRlc3RpbWFnZSk7CgoJLy90ZXN0bWVzaC0+dmVydGljZXMucmVzaXplKDMpOwoJLy90ZXN0bWVzaC0+dmVydGljZXNbMF0ucG9zID0gezAuMGYsIDAuMGYsIDAuMGZ9OwoJLy90ZXN0bWVzaC0+dmVydGljZXNbMV0ucG9zID0gezAuMGYsIDAuNWYsIDAuMGZ9OwoJLy90ZXN0bWVzaC0+dmVydGljZXNbMl0ucG9zID0gezAuNWYsIDAuMGYsIDAuMGZ9OwoKCS8vdXBsb2FkX21lc2godGVzdG1lc2gpO/SrAAAAAAAA9KsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAa68AAAAAAAD1qwAAAAAAAAAAAAAAAPC/AQAAAAEAAADnygAAAAAAAOfKAAAAAAAAAAAAAAAA8L8"
				],
				[
					368,
					1,
					"left_delete",
					null,
					"AQAAAJmrAAAAAAAAmasAAAAAAAA2AAAACgkvLyAjIyMjIyMjIyBJIFdJTEwgUkVNT1ZFIFRISVMgTEFURVIgIyMjIyMjIyMjIyMjIyMj",
					"AgAAAAAAAAABAAAAz6sAAAAAAACZqwAAAAAAAAAAAAAAAPC/AQAAAAEAAABwxwAAAAAAAHDHAAAAAAAAAAAAAAAA8L8"
				],
				[
					371,
					1,
					"left_delete",
					null,
					"AQAAAL6rAAAAAAAAvqsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAv6sAAAAAAAC/qwAAAAAAAAAAAAAAAPC/AQAAAAEAAAA6xwAAAAAAADrHAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"left_delete",
					null,
					"AQAAABGsAAAAAAAAEawAAAAAAAD1AAAACgkvL2dsbTo6dmVjMyBvYmpjZW50ZXIgPSB7c2luKHRpY2sqNCkgKiAxMC4wZiwwLjBmLDAuMGZ9OwoJLy9nbG06OnZlYzMgc2MgPSB7Y29zKHRpY2sqMikgKiA1LjBmLDEuMGYsMS4wZn07CgoJLy90ZXN0b2JqZWN0LT50cmFuc2Zvcm0gPSBnbG06OnRyYW5zbGF0ZShnbG06Om1hdDQoMS5mKSwgb2JqY2VudGVyKTsKCS8vdGVzdG9iamVjdC0+dHJhbnNmb3JtID0gZ2xtOjpzY2FsZSh0ZXN0b2JqZWN0LT50cmFuc2Zvcm0sc2MpOwo",
					"AgAAAAAAAAABAAAABq0AAAAAAAARrAAAAAAAAAAAAAAAAPC/AQAAAAEAAAA5xwAAAAAAADnHAAAAAAAAAAAAAAAA8L8"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANyrAAAAAAAA3asAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA3KsAAAAAAADcqwAAAAAAAAAAAAAAAPC/AQAAAAEAAABExgAAAAAAAETGAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					1,
					"left_delete",
					null,
					"AQAAABGsAAAAAAAAEawAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAEqwAAAAAAAASrAAAAAAAAAAAAAAAAPC/AQAAAAEAAABFxgAAAAAAAEXGAAAAAAAAAAAAAAAA8L8"
				],
				[
					392,
					2,
					"left_delete",
					null,
					"AgAAAOuzAAAAAAAA67MAAAAAAABrAAAACS8vdms6OlJlc3VsdCByZXMgPSBjb3JlLT5ncHVkZXZpY2Uud2FpdEZvckZlbmNlcyhmcmFtZUZsaWdodE51bSwgcmVuZGVyX2ZlbmNlcy5kYXRhKCksIHRydWUsIFVJTlQzMl9NQVgpOwrqswAAAAAAAOqzAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAVrQAAAAAAADrswAAAAAAAAAAAAAAAPC/AQAAAAEAAABExgAAAAAAAETGAAAAAAAAAAAAAAAA8L8"
				],
				[
					395,
					1,
					"left_delete",
					null,
					"AQAAAMyzAAAAAAAAzLMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAzbMAAAAAAADNswAAAAAAAAAAAAAAAPC/AQAAAAEAAADYxQAAAAAAANjFAAAAAAAAAAAAAAAA8L8"
				],
				[
					398,
					1,
					"left_delete",
					null,
					"AQAAAF61AAAAAAAAXrUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAX7UAAAAAAABftQAAAAAAAAAAAAAAAPC/AQAAAAEAAADXxQAAAAAAANfFAAAAAAAAAAAAAAAA8L8"
				],
				[
					401,
					3,
					"left_delete",
					null,
					"AwAAABi0AAAAAAAAGLQAAAAAAAAEAAAAL2xvbBe0AAAAAAAAF7QAAAAAAAABAAAALxa0AAAAAAAAFrQAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAHLQAAAAAAAAYtAAAAAAAAAAAAAAAAPC/AQAAAAEAAADWxQAAAAAAANbFAAAAAAAAAAAAAAAA8L8"
				],
				[
					404,
					1,
					"left_delete",
					null,
					"AQAAAL60AAAAAAAAvrQAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAv7QAAAAAAAC/tAAAAAAAAAAAAAAAAPC/AQAAAAEAAADQxQAAAAAAANDFAAAAAAAAAAAAAAAA8L8"
				],
				[
					407,
					1,
					"left_delete",
					null,
					"AQAAAPu0AAAAAAAA+7QAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAA/LQAAAAAAAD8tAAAAAAAAAAAAAAAAPC/AQAAAAEAAADPxQAAAAAAAM/FAAAAAAAAAAAAAAAA8L8"
				],
				[
					410,
					1,
					"left_delete",
					null,
					"AQAAACa1AAAAAAAAJrUAAAAAAAADAAAACiAg",
					"AgAAAAAAAAABAAAAKbUAAAAAAAAmtQAAAAAAAAAAAAAAAPC/AQAAAAEAAADOxQAAAAAAAM7FAAAAAAAAAAAAAAAA8L8"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAACa1AAAAAAAAJ7UAAAAAAAAAAAAAJ7UAAAAAAAAotQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAJrUAAAAAAAAmtQAAAAAAAAAAAAAAAPC/AQAAAAEAAADLxQAAAAAAAMvFAAAAAAAAAAAAAAAA8L8"
				],
				[
					416,
					2,
					"left_delete",
					null,
					"AgAAALq1AAAAAAAAurUAAAAAAAAiAAAACS8vc3RkOjpjb3V0IDw8ICJhIiA8PCBzdGQ6OmVuZGw7Crm1AAAAAAAAubUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAA3LUAAAAAAAC6tQAAAAAAAAAAAAAAAPC/AQAAAAEAAADNxQAAAAAAAM3FAAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					2,
					"left_delete",
					null,
					"AgAAANS1AAAAAAAA1LUAAAAAAAAjAAAACgkvL3N0ZDo6Y291dCA8PCAiYiIgPDwgc3RkOjplbmRsOwrTtQAAAAAAANO1AAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAA97UAAAAAAADUtQAAAAAAAAAAAAAAAPC/AQAAAAEAAACqxQAAAAAAAKrFAAAAAAAAAAAAAAAA8L8"
				],
				[
					422,
					2,
					"left_delete",
					null,
					"AgAAANO2AAAAAAAA07YAAAAAAAAjAAAACgoJLy9zdGQ6OmNvdXQgPDwgImMiIDw8IHN0ZDo6ZW5kbDvStgAAAAAAANK2AAAAAAAAAQAAADs",
					"AgAAAAAAAAABAAAA9rYAAAAAAADTtgAAAAAAAAAAAAAAAPC/AQAAAAEAAACGxQAAAAAAAIbFAAAAAAAAAAAAAAAA8L8"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANK2AAAAAAAA07YAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA0rYAAAAAAADStgAAAAAAAAAAAAAAAPC/AQAAAAEAAABixQAAAAAAAGLFAAAAAAAAAAAAAAAA8L8"
				],
				[
					426,
					2,
					"left_delete",
					null,
					"AgAAAAS3AAAAAAAABLcAAAAAAAABAAAACgO3AAAAAAAAA7cAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAABbcAAAAAAAAEtwAAAAAAAAAAAAAAAPC/AQAAAAEAAABjxQAAAAAAAGPFAAAAAAAAAAAAAAAA8L8"
				],
				[
					429,
					1,
					"left_delete",
					null,
					"AQAAAPW3AAAAAAAA9bcAAAAAAAAjAAAACgoJLy9zdGQ6OmNvdXQgPDwgImQiIDw8IHN0ZDo6ZW5kbDs",
					"AgAAAAAAAAABAAAAGLgAAAAAAAD1twAAAAAAAAAAAAAAAPC/AQAAAAEAAABhxQAAAAAAAGHFAAAAAAAAAAAAAAAA8L8"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPW3AAAAAAAA9rcAAAAAAAAAAAAA9rcAAAAAAAD3twAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA9bcAAAAAAAD1twAAAAAAAAAAAAAAAPC/AQAAAAEAAAA+xQAAAAAAAD7FAAAAAAAAAAAAAAAA8L8"
				],
				[
					433,
					1,
					"left_delete",
					null,
					"AgAAAI64AAAAAAAAjrgAAAAAAAABAAAACva3AAAAAAAA9rcAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAjrgAAAAAAACPuAAAAAAAAAAAAAAAAPC/AQAAAAEAAABAxQAAAAAAAEDFAAAAAAAAAAAAAAAA8L8"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI24AAAAAAAAjrgAAAAAAAAAAAAAjrgAAAAAAACPuAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAjbgAAAAAAACNuAAAAAAAAAAAAAAAAPC/AQAAAAEAAAA+xQAAAAAAAD7FAAAAAAAAAAAAAAAA8L8"
				],
				[
					437,
					1,
					"left_delete",
					null,
					"AQAAAGy4AAAAAAAAbLgAAAAAAAAhAAAACS8vc3RkOjpjb3V0IDw8ICJlIiA8PCBzdGQ6OmVuZGw7",
					"AgAAAAAAAAABAAAAjbgAAAAAAABsuAAAAAAAAAAAAAAAAPC/AQAAAAEAAABAxQAAAAAAAEDFAAAAAAAAAAAAAAAA8L8"
				],
				[
					440,
					1,
					"left_delete",
					null,
					"AQAAAEq5AAAAAAAASrkAAAAAAAAhAAAALy8Jc3RkOjpjb3V0IDw8ICJmIiA8PCBzdGQ6OmVuZGw7",
					"AgAAAAAAAAABAAAAa7kAAAAAAABKuQAAAAAAAAAAAAAAAPC/AQAAAAEAAAAfxQAAAAAAAB/FAAAAAAAAAAAAAAAA8L8"
				],
				[
					443,
					1,
					"left_delete",
					null,
					"AQAAANu5AAAAAAAA27kAAAAAAAAhAAAALy8Jc3RkOjpjb3V0IDw8ICJnIiA8PCBzdGQ6OmVuZGw7",
					"AgAAAAAAAAABAAAA/LkAAAAAAADbuQAAAAAAAAAAAAAAAPC/AQAAAAEAAAD+xAAAAAAAAP7EAAAAAAAAAAAAAAAA8L8"
				],
				[
					446,
					1,
					"left_delete",
					null,
					"AQAAAGm6AAAAAAAAaboAAAAAAAAjAAAACgkvL3N0ZDo6Y291dCA8PCAiaCIgPDwgc3RkOjplbmRsOwk",
					"AgAAAAAAAAABAAAAjLoAAAAAAABpugAAAAAAAAAAAAAAAPC/AQAAAAEAAADdxAAAAAAAAN3EAAAAAAAAAAAAAAAA8L8"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGm6AAAAAAAAaroAAAAAAAAAAAAAaroAAAAAAABrugAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAaboAAAAAAABpugAAAAAAAAAAAAAAAPC/AQAAAAEAAAC6xAAAAAAAALrEAAAAAAAAAAAAAAAA8L8"
				],
				[
					450,
					1,
					"left_delete",
					null,
					"AgAAAP+6AAAAAAAA/7oAAAAAAAAiAAAACgkvL3N0ZDo6Y291dCA8PCAiaSIgPDwgc3RkOjplbmRsO2q6AAAAAAAAaroAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAIbsAAAAAAAD/ugAAAAAAAAAAAAAAAPC/AQAAAAEAAAC8xAAAAAAAALzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP66AAAAAAAA/7oAAAAAAAAAAAAA/7oAAAAAAAAAuwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA/roAAAAAAAD+ugAAAAAAAAAAAAAAAPC/AQAAAAEAAACZxAAAAAAAAJnEAAAAAAAAAAAAAAAA8L8"
				],
				[
					454,
					1,
					"left_delete",
					null,
					"AgAAAJm7AAAAAAAAmbsAAAAAAAABAAAAO/+6AAAAAAAA/7oAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAmrsAAAAAAACauwAAAAAAAAAAAAAAAPC/AQAAAAEAAACbxAAAAAAAAJvEAAAAAAAAAAAAAAAA8L8"
				],
				[
					457,
					1,
					"left_delete",
					null,
					"AQAAAHC7AAAAAAAAcLsAAAAAAAAoAAAACgkJLy9zdGQ6OmNvdXQgPDwgb2JqLT5uYW1lIDw8IHN0ZDo6ZW5kbA",
					"AgAAAAAAAAABAAAAmLsAAAAAAABwuwAAAAAAAAAAAAAAAPC/AQAAAAEAAACZxAAAAAAAAJnEAAAAAAAAAAAAAAAA8L8"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHC7AAAAAAAAcbsAAAAAAAAAAAAAcbsAAAAAAABzuwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAcLsAAAAAAABwuwAAAAAAAAAAAAAAAPC/AQAAAAEAAABxxAAAAAAAAHHEAAAAAAAAAAAAAAAA8L8"
				],
				[
					474,
					1,
					"left_delete",
					null,
					"AgAAAOS8AAAAAAAA5LwAAAAAAAAiAAAACgkvL3N0ZDo6Y291dCA8PCAiaiIgPDwgc3RkOjplbmRsO3G7AAAAAAAAcbsAAAAAAAACAAAACQk",
					"AgAAAAAAAAABAAAABr0AAAAAAADkvAAAAAAAAAAAAAAAAPC/AQAAAAEAAAB0xAAAAAAAAHTEAAAAAAAAAAAAAAAA8L8"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOK8AAAAAAAA47wAAAAAAAAAAAAA47wAAAAAAADkvAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA4rwAAAAAAADivAAAAAAAAAAAAAAAAPC/AQAAAAEAAABQxAAAAAAAAFDEAAAAAAAAAAAAAAAA8L8"
				],
				[
					478,
					1,
					"left_delete",
					null,
					"AgAAAB69AAAAAAAAHr0AAAAAAAAiAAAACgkvL3N0ZDo6Y291dCA8PCAiayIgPDwgc3RkOjplbmRsO+O8AAAAAAAA47wAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAQL0AAAAAAAAevQAAAAAAAAAAAAAAAPC/AQAAAAEAAABSxAAAAAAAAFLEAAAAAAAAAAAAAAAA8L8"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB29AAAAAAAAHr0AAAAAAAAAAAAAHr0AAAAAAAAfvQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAHb0AAAAAAAAdvQAAAAAAAAAAAAAAAPC/AQAAAAEAAAAvxAAAAAAAAC/EAAAAAAAAAAAAAAAA8L8"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAAD29AAAAAAAAPr0AAAAAAAAAAAAAHr0AAAAAAAAevQAAAAAAAAEAAAAJ",
					"AgAAAAAAAAABAAAAPb0AAAAAAAA9vQAAAAAAAAAAAAAAAPC/AQAAAAEAAAAxxAAAAAAAADHEAAAAAAAAAAAAAAAA8L8"
				],
				[
					501,
					2,
					"left_delete",
					null,
					"AgAAAP7AAAAAAAAA/sAAAAAAAAAEAAAAY29vbP3AAAAAAAAA/cAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAA/sAAAAAAAAACwQAAAAAAAAAAAAAAAPC/AQAAAAEAAAAxxAAAAAAAADHEAAAAAAAAAAAAAAAA8L8"
				],
				[
					506,
					1,
					"left_delete",
					null,
					"AQAAAJzLAAAAAAAAnMsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAncsAAAAAAACdywAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					521,
					1,
					"reindent",
					null,
					"AQAAAI3ZAAAAAAAAjtkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAjdkAAAAAAACN2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": "\n//used"
					},
					"CQAAAI7ZAAAAAAAAj9kAAAAAAAAAAAAAj9kAAAAAAACQ2QAAAAAAAAAAAACN2QAAAAAAAI3ZAAAAAAAAAQAAAAmP2QAAAAAAAJDZAAAAAAAAAAAAAJDZAAAAAAAAkdkAAAAAAAAAAAAAkdkAAAAAAACS2QAAAAAAAAAAAACS2QAAAAAAAJPZAAAAAAAAAAAAAJPZAAAAAAAAlNkAAAAAAAAAAAAAlNkAAAAAAACV2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAjtkAAAAAAACO2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": " foor"
					},
					"BQAAAJXZAAAAAAAAltkAAAAAAAAAAAAAltkAAAAAAACX2QAAAAAAAAAAAACX2QAAAAAAAJjZAAAAAAAAAAAAAJjZAAAAAAAAmdkAAAAAAAAAAAAAmdkAAAAAAACa2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAldkAAAAAAACV2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJrZAAAAAAAAm9kAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAmtkAAAAAAACa2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					525,
					3,
					"left_delete",
					null,
					"AwAAAJrZAAAAAAAAmtkAAAAAAAABAAAAIJnZAAAAAAAAmdkAAAAAAAABAAAAcpjZAAAAAAAAmNkAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAm9kAAAAAAACb2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJjZAAAAAAAAmdkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAmNkAAAAAAACY2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": " testing"
					},
					"CAAAAJnZAAAAAAAAmtkAAAAAAAAAAAAAmtkAAAAAAACb2QAAAAAAAAAAAACb2QAAAAAAAJzZAAAAAAAAAAAAAJzZAAAAAAAAndkAAAAAAAAAAAAAndkAAAAAAACe2QAAAAAAAAAAAACe2QAAAAAAAJ/ZAAAAAAAAAAAAAJ/ZAAAAAAAAoNkAAAAAAAAAAAAAoNkAAAAAAACh2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAmdkAAAAAAACZ2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": " rpevi"
					},
					"BgAAAKHZAAAAAAAAotkAAAAAAAAAAAAAotkAAAAAAACj2QAAAAAAAAAAAACj2QAAAAAAAKTZAAAAAAAAAAAAAKTZAAAAAAAApdkAAAAAAAAAAAAApdkAAAAAAACm2QAAAAAAAAAAAACm2QAAAAAAAKfZAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAodkAAAAAAACh2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					529,
					4,
					"left_delete",
					null,
					"BAAAAKbZAAAAAAAAptkAAAAAAAABAAAAaaXZAAAAAAAApdkAAAAAAAABAAAAdqTZAAAAAAAApNkAAAAAAAABAAAAZaPZAAAAAAAAo9kAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAp9kAAAAAAACn2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": "previo"
					},
					"BgAAAKPZAAAAAAAApNkAAAAAAAAAAAAApNkAAAAAAACl2QAAAAAAAAAAAACl2QAAAAAAAKbZAAAAAAAAAAAAAKbZAAAAAAAAp9kAAAAAAAAAAAAAp9kAAAAAAACo2QAAAAAAAAAAAACo2QAAAAAAAKnZAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAo9kAAAAAAACj2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					531,
					6,
					"left_delete",
					null,
					"BgAAAKjZAAAAAAAAqNkAAAAAAAABAAAAb6fZAAAAAAAAp9kAAAAAAAABAAAAaabZAAAAAAAAptkAAAAAAAABAAAAdqXZAAAAAAAApdkAAAAAAAABAAAAZaTZAAAAAAAApNkAAAAAAAABAAAAcqPZAAAAAAAAo9kAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAqdkAAAAAAACp2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "pr"
					},
					"AgAAAKPZAAAAAAAApNkAAAAAAAAAAAAApNkAAAAAAACl2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAo9kAAAAAAACj2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					533,
					3,
					"left_delete",
					null,
					"AwAAAKTZAAAAAAAApNkAAAAAAAABAAAAcqPZAAAAAAAAo9kAAAAAAAABAAAAcKLZAAAAAAAAotkAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAApdkAAAAAAACl2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "prev"
					},
					"BAAAAKLZAAAAAAAAo9kAAAAAAAAAAAAAo9kAAAAAAACk2QAAAAAAAAAAAACk2QAAAAAAAKXZAAAAAAAAAAAAAKXZAAAAAAAAptkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAotkAAAAAAACi2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					535,
					4,
					"left_delete",
					null,
					"BAAAAKXZAAAAAAAApdkAAAAAAAABAAAAdqTZAAAAAAAApNkAAAAAAAABAAAAZaPZAAAAAAAAo9kAAAAAAAABAAAAcqLZAAAAAAAAotkAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAptkAAAAAAACm2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": "on"
					},
					"AgAAAKLZAAAAAAAAo9kAAAAAAAAAAAAAo9kAAAAAAACk2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAotkAAAAAAACi2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAKTZAAAAAAAApdkAAAAAAAAAAAAApdkAAAAAAACm2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAApNkAAAAAAACk2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					538,
					1,
					"left_delete",
					null,
					"AQAAAKXZAAAAAAAApdkAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAptkAAAAAAACm2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": "imagesd"
					},
					"BwAAAKXZAAAAAAAAptkAAAAAAAAAAAAAptkAAAAAAACn2QAAAAAAAAAAAACn2QAAAAAAAKjZAAAAAAAAAAAAAKjZAAAAAAAAqdkAAAAAAAAAAAAAqdkAAAAAAACq2QAAAAAAAAAAAACq2QAAAAAAAKvZAAAAAAAAAAAAAKvZAAAAAAAArNkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAApdkAAAAAAACl2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					540,
					1,
					"left_delete",
					null,
					"AQAAAKvZAAAAAAAAq9kAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAArNkAAAAAAACs2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": " directly"
					},
					"CQAAAKvZAAAAAAAArNkAAAAAAAAAAAAArNkAAAAAAACt2QAAAAAAAAAAAACt2QAAAAAAAK7ZAAAAAAAAAAAAAK7ZAAAAAAAAr9kAAAAAAAAAAAAAr9kAAAAAAACw2QAAAAAAAAAAAACw2QAAAAAAALHZAAAAAAAAAAAAALHZAAAAAAAAstkAAAAAAAAAAAAAstkAAAAAAACz2QAAAAAAAAAAAACz2QAAAAAAALTZAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAq9kAAAAAAACr2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALTZAAAAAAAAtdkAAAAAAAAAAAAAtdkAAAAAAAC22QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAtNkAAAAAAAC02QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AwAAAKTZAAAAAAAApdkAAAAAAAAAAAAAttkAAAAAAAC22QAAAAAAAAEAAAAJpdkAAAAAAACm2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAApNkAAAAAAACk2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					550,
					1,
					"left_delete",
					null,
					"AQAAAKXZAAAAAAAApdkAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAptkAAAAAAACm2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "hardcoded"
					},
					"CQAAAKXZAAAAAAAAptkAAAAAAAAAAAAAptkAAAAAAACn2QAAAAAAAAAAAACn2QAAAAAAAKjZAAAAAAAAAAAAAKjZAAAAAAAAqdkAAAAAAAAAAAAAqdkAAAAAAACq2QAAAAAAAAAAAACq2QAAAAAAAKvZAAAAAAAAAAAAAKvZAAAAAAAArNkAAAAAAAAAAAAArNkAAAAAAACt2QAAAAAAAAAAAACt2QAAAAAAAK7ZAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAApdkAAAAAAACl2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"left_delete",
					null,
					"AQAAAL7ZAAAAAAAAvtkAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAv9kAAAAAAAC/2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					561,
					1,
					"insert",
					{
						"characters": "before,"
					},
					"CAAAAJbZAAAAAAAAl9kAAAAAAAAAAAAAl9kAAAAAAACX2QAAAAAAAAMAAABmb3KX2QAAAAAAAJjZAAAAAAAAAAAAAJjZAAAAAAAAmdkAAAAAAAAAAAAAmdkAAAAAAACa2QAAAAAAAAAAAACa2QAAAAAAAJvZAAAAAAAAAAAAAJvZAAAAAAAAnNkAAAAAAAAAAAAAnNkAAAAAAACd2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAltkAAAAAAACZ2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": " when"
					},
					"BQAAAJ3ZAAAAAAAAntkAAAAAAAAAAAAAntkAAAAAAACf2QAAAAAAAAAAAACf2QAAAAAAAKDZAAAAAAAAAAAAAKDZAAAAAAAAodkAAAAAAAAAAAAAodkAAAAAAACi2QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAndkAAAAAAACd2QAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "#pragma once\n\n#include <vector>\n#include <array>\n#include <string>\n#include <fstream>\n#include <sstream>\n\n//terribly made basic OBJ file reader\n//remake later \n\nnamespace MeshTools {\n\n\tstruct MeshVertex{\n\t\tfloat pos[3] = {0,0,0};\n\t\tfloat uv[2] = {0,0};\n\t\tfloat norm[3] = {0,0,0};\n\n\t\tvoid print() {\n\t\t\tstd::cout << \"{pos : \" << pos[0] << \",\" << pos[1] << \",\" << pos[2] << \" - UV: \" << uv[0] << \",\" << uv[1] << \"}\" << std::endl;\n\t\t}\n\t};\n\n\tstruct MeshData {\n\t\tstd::vector<MeshVertex> vertices;\n\t\tstd::vector<int> indices;\n\n\t\tbool load_from_file(const char* path) {\n\n\t\t\tstd::ifstream meshfile;\n\t\t\tmeshfile.open(path);\n\t\t\tif (meshfile.fail()) return false;\n\n\t\t\tstd::string line;\n\n\t\t\tstd::vector<std::array<float,2>> UV_storage;\n\t\t\tstd::vector<std::array<float,3>> vertices_storage;\n\t\t\tstd::vector<std::array<float,3>> normal_storage;\n\n\t\t\tint index_count = 0;\n\n\t\t\twhile (!meshfile.eof()) {\n\t\t\t\tmeshfile >> line; \n\t\t\t\tstd::cout << \"reading\" << line << std::endl;\n\n\t\t\t\tif (line == \"v\") {\n\t\t\t\t\t\n\t\t\t\t\tstd::cout << \"new vertex\" << std::endl;\n\n\t\t\t\t\tstd::array<float,3>  vert;\n\t\t\t\t\tfor (int i = 0; i < 3; i++){\n\t\t\t\t\t\tmeshfile >> line; \n\t\t\t\t\t\tstd::cout << \"float:\" << line << std::endl;\n\t\t\t\t\t\tvert[i] = std::stof(line);\n\t\t\t\t\t}\n\t\t\t\t\tvertices_storage.push_back(vert);\n\t\t\t\t} else if (line == \"vn\") {\n\t\t\t\t\tstd::cout << \"new VN\" << std::endl;\n\t\t\t\t\tstd::array<float,3>  normal;\n\t\t\t\t\tfor (int i = 0; i < 3; i++){\n\t\t\t\t\t\tmeshfile >> line; \n\t\t\t\t\t\tstd::cout << \"float:\" << line << std::endl;\n\t\t\t\t\t\tnormal[i] = std::stof(line);\n\t\t\t\t\t}\n\t\t\t\t\tnormal_storage.push_back(normal);\n\t\t\t\t} else if (line == \"vt\") {\n\t\t\t\t\tstd::cout << \"new UV\" << std::endl;\n\t\t\t\t\tstd::array<float,2> uv;\n\n\t\t\t\t\tfor (int i = 0; i < 2; i++){\n\t\t\t\t\t\tmeshfile >> line; \n\t\t\t\t\t\tstd::cout << \"float:\" << line << std::endl;\n\t\t\t\t\t\tuv[i] = std::stof(line);\n\t\t\t\t\t}\n\n\t\t\t\t\tUV_storage.push_back(uv);\n\t\t\t\t} else if (line == \"f\") {\n\t\t\t\t\tstd::cout << \"face index\" << std::endl;\n\n\t\t\t\t\tfor (int i = 0; i < 3; i++){\n\t\t\t\t\t\tmeshfile >> line; \n\n\t\t\t\t\t\tint vertex_stri = line.find(\"/\", 0); //stri = string index\n\t\t\t\t\t\tint uv_stri = line.find(\"/\", vertex_stri+1);\n\t\t\t\t\t\tint norm_stri = line.find(\"/\", uv_stri+1);\n\n\t\t\t\t\t\tstd::string vertexindex_str = line.substr(0,vertex_stri);\n\t\t\t\t\t\tstd::string uvindex_str = line.substr(vertex_stri+1,uv_stri-vertex_stri-1);\n\t\t\t\t\t\tstd::string normindex_str = line.substr(uv_stri+1,norm_stri-uv_stri-1);\n\n\t\t\t\t\t\tstd::cout << \"vertex: \" << vertexindex_str << \"uvindex:\" << uvindex_str << \"normalindex:\" << normindex_str << std::endl;\n\n\t\t\t\t\t\tint vertexindex = std::stoi(vertexindex_str)-1;\n\t\t\t\t\t\tint uvindex = std::stoi(uvindex_str)-1;\n\t\t\t\t\t\tint normindex = std::stoi(normindex_str)-1;\n\n\t\t\t\t\t\tMeshVertex newvert;\n\n\t\t\t\t\t\tnewvert.uv[0] = UV_storage[uvindex][0];\n\t\t\t\t\t\tnewvert.uv[1] = UV_storage[uvindex][1];\n\n\t\t\t\t\t\tnewvert.pos[0] = vertices_storage[vertexindex][0];\n\t\t\t\t\t\tnewvert.pos[1] = vertices_storage[vertexindex][1];\n\t\t\t\t\t\tnewvert.pos[2] = vertices_storage[vertexindex][2];\n\n\t\t\t\t\t\tnewvert.norm[0] = normal_storage[normindex][0];\n\t\t\t\t\t\tnewvert.norm[1] = normal_storage[normindex][1];\n\t\t\t\t\t\tnewvert.norm[2] = normal_storage[normindex][2];\n\n\t\t\t\t\t\tvertices.push_back(newvert);\n\t\t\t\t\t\tindices.push_back(index_count);\n\t\t\t\t\t\tindex_count++;\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tUV_storage.clear();\n\n\t\t\tfor (int indic : indices) {\n\t\t\t\tvertices[indic].print();\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t};\n\n}",
			"file": "include/meshtools.hpp",
			"file_size": 3273,
			"file_write_time": 133116957263624110,
			"settings":
			{
				"buffer_size": 3328,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n//inc"
					},
					"BwAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAABqAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAABtAAAAAAAAAG4AAAAAAAAAAAAAAG4AAAAAAAAAbwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					3,
					"left_delete",
					null,
					"AwAAAG4AAAAAAAAAbgAAAAAAAAABAAAAY20AAAAAAAAAbQAAAAAAAAABAAAAbmwAAAAAAAAAbAAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "TOTO"
					},
					"BAAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAG8AAAAAAAAAcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAG8AAAAAAAAAbwAAAAAAAAABAAAAT24AAAAAAAAAbgAAAAAAAAABAAAAVA",
					"AQAAAAAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "DO:"
					},
					"AwAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " NEED"
					},
					"BQAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " TO"
					},
					"AwAAAHYAAAAAAAAAdwAAAAAAAAAAAAAAdwAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " REFACTOR"
					},
					"CQAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAB7AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAIIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " TH"
					},
					"AwAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					9,
					"left_delete",
					null,
					"CQAAAIQAAAAAAAAAhAAAAAAAAAABAAAASIMAAAAAAAAAgwAAAAAAAAABAAAAVIIAAAAAAAAAggAAAAAAAAABAAAAIIEAAAAAAAAAgQAAAAAAAAABAAAAUoAAAAAAAAAAgAAAAAAAAAABAAAAT38AAAAAAAAAfwAAAAAAAAABAAAAVH4AAAAAAAAAfgAAAAAAAAABAAAAQ30AAAAAAAAAfQAAAAAAAAABAAAAQXwAAAAAAAAAfAAAAAAAAAABAAAARg",
					"AQAAAAAAAAABAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "MAKE"
					},
					"BAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAAAAAAAAAB8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " ALL"
					},
					"BAAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " THIS,"
					},
					"BgAAAIQAAAAAAAAAhQAAAAAAAAAAAAAAhQAAAAAAAACGAAAAAAAAAAAAAACGAAAAAAAAAIcAAAAAAAAAAAAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAIoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " T"
					},
					"AgAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAIsAAAAAAAAAiwAAAAAAAAABAAAAVA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "ITS"
					},
					"AwAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " FA"
					},
					"AwAAAI4AAAAAAAAAjwAAAAAAAAAAAAAAjwAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAJAAAAAAAAAAkAAAAAAAAAABAAAAQY8AAAAAAAAAjwAAAAAAAAABAAAARg",
					"AQAAAAAAAAABAAAAkQAAAAAAAACRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "VERY"
					},
					"BAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " BAD"
					},
					"BAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					36,
					"left_delete",
					null,
					"JAAAAJYAAAAAAAAAlgAAAAAAAAABAAAARJUAAAAAAAAAlQAAAAAAAAABAAAAQZQAAAAAAAAAlAAAAAAAAAABAAAAQpMAAAAAAAAAkwAAAAAAAAABAAAAIJIAAAAAAAAAkgAAAAAAAAABAAAAWZEAAAAAAAAAkQAAAAAAAAABAAAAUpAAAAAAAAAAkAAAAAAAAAABAAAARY8AAAAAAAAAjwAAAAAAAAABAAAAVo4AAAAAAAAAjgAAAAAAAAABAAAAII0AAAAAAAAAjQAAAAAAAAABAAAAU4wAAAAAAAAAjAAAAAAAAAABAAAAVIsAAAAAAAAAiwAAAAAAAAABAAAASYoAAAAAAAAAigAAAAAAAAABAAAAIIkAAAAAAAAAiQAAAAAAAAABAAAALIgAAAAAAAAAiAAAAAAAAAABAAAAU4cAAAAAAAAAhwAAAAAAAAABAAAASYYAAAAAAAAAhgAAAAAAAAABAAAASIUAAAAAAAAAhQAAAAAAAAABAAAAVIQAAAAAAAAAhAAAAAAAAAABAAAAIIMAAAAAAAAAgwAAAAAAAAABAAAATIIAAAAAAAAAggAAAAAAAAABAAAATIEAAAAAAAAAgQAAAAAAAAABAAAAQYAAAAAAAAAAgAAAAAAAAAABAAAAIH8AAAAAAAAAfwAAAAAAAAABAAAARX4AAAAAAAAAfgAAAAAAAAABAAAAS30AAAAAAAAAfQAAAAAAAAABAAAAQXwAAAAAAAAAfAAAAAAAAAABAAAATXsAAAAAAAAAewAAAAAAAAABAAAARXoAAAAAAAAAegAAAAAAAAABAAAAUnkAAAAAAAAAeQAAAAAAAAABAAAAIHgAAAAAAAAAeAAAAAAAAAABAAAAT3cAAAAAAAAAdwAAAAAAAAABAAAAVHYAAAAAAAAAdgAAAAAAAAABAAAAIHUAAAAAAAAAdQAAAAAAAAABAAAARHQAAAAAAAAAdAAAAAAAAAABAAAARXMAAAAAAAAAcwAAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					7,
					"left_delete",
					null,
					"BwAAAHIAAAAAAAAAcgAAAAAAAAABAAAATnEAAAAAAAAAcQAAAAAAAAABAAAAIHAAAAAAAAAAcAAAAAAAAAABAAAAOm8AAAAAAAAAbwAAAAAAAAABAAAAT24AAAAAAAAAbgAAAAAAAAABAAAARG0AAAAAAAAAbQAAAAAAAAABAAAAT2wAAAAAAAAAbAAAAAAAAAABAAAAVA",
					"AQAAAAAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "extremely"
					},
					"CQAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " baisc"
					},
					"BgAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					3,
					"left_delete",
					null,
					"AwAAAHoAAAAAAAAAegAAAAAAAAABAAAAY3kAAAAAAAAAeQAAAAAAAAABAAAAc3gAAAAAAAAAeAAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHgAAAAAAAAAeQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					3,
					"left_delete",
					null,
					"AwAAAHgAAAAAAAAAeAAAAAAAAAABAAAAc3cAAAAAAAAAdwAAAAAAAAABAAAAYXYAAAAAAAAAdgAAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAHYAAAAAAAAAdwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					9,
					"left_delete",
					null,
					"CQAAAHYAAAAAAAAAdgAAAAAAAAABAAAAYnUAAAAAAAAAdQAAAAAAAAABAAAAIHQAAAAAAAAAdAAAAAAAAAABAAAAeXMAAAAAAAAAcwAAAAAAAAABAAAAbHIAAAAAAAAAcgAAAAAAAAABAAAAZXEAAAAAAAAAcQAAAAAAAAABAAAAbXAAAAAAAAAAcAAAAAAAAAABAAAAZW8AAAAAAAAAbwAAAAAAAAABAAAAcm4AAAAAAAAAbgAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAG0AAAAAAAAAbQAAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAG0AAAAAAAAAbgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAG0AAAAAAAAAbQAAAAAAAAABAAAAdGwAAAAAAAAAbAAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "terribly"
					},
					"CAAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " mad"
					},
					"BAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAHcAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAAAAAAAAAB0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHgAAAAAAAAAeQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAAHgAAAAAAAAAeAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHgAAAAAAAAAeQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " mesh"
					},
					"BQAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAB7AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " loader"
					},
					"BwAAAH4AAAAAAAAAfwAAAAAAAAAAAAAAfwAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAIEAAAAAAAAAAAAAAIEAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAhQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					11,
					"left_delete",
					null,
					"CwAAAIQAAAAAAAAAhAAAAAAAAAABAAAAcoMAAAAAAAAAgwAAAAAAAAABAAAAZYIAAAAAAAAAggAAAAAAAAABAAAAZIEAAAAAAAAAgQAAAAAAAAABAAAAYYAAAAAAAAAAgAAAAAAAAAABAAAAb38AAAAAAAAAfwAAAAAAAAABAAAAbH4AAAAAAAAAfgAAAAAAAAABAAAAIH0AAAAAAAAAfQAAAAAAAAABAAAAaHwAAAAAAAAAfAAAAAAAAAABAAAAc3sAAAAAAAAAewAAAAAAAAABAAAAZXoAAAAAAAAAegAAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "OBJ"
					},
					"AwAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAH0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " file"
					},
					"BQAAAH0AAAAAAAAAfgAAAAAAAAAAAAAAfgAAAAAAAAB/AAAAAAAAAAAAAAB/AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " reader"
					},
					"BwAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " good"
					},
					"BQAAAIkAAAAAAAAAigAAAAAAAAAAAAAAigAAAAAAAACLAAAAAAAAAAAAAACLAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " lord"
					},
					"BQAAAI4AAAAAAAAAjwAAAAAAAAAAAAAAjwAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJEAAAAAAAAAAAAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " it"
					},
					"AwAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " makes"
					},
					"BgAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAACbAAAAAAAAAJwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " me"
					},
					"AwAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " cry"
					},
					"BAAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAChAAAAAAAAAAAAAAChAAAAAAAAAKIAAAAAAAAAAAAAAKIAAAAAAAAAowAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					2,
					"left_delete",
					null,
					"AgAAAIoAAAAAAAAAigAAAAAAAAAZAAAAZ29vZCBsb3JkIGl0IG1ha2VzIG1lIGNyeYkAAAAAAAAAiQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAowAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"left_delete",
					null,
					"AQAAAIkAAAAAAAAAiQAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " need"
					},
					"BQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAI0AAAAAAAAAAAAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " remake"
					},
					"BwAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " lat"
					},
					"BAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAACbAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					17,
					"left_delete",
					null,
					"EQAAAJwAAAAAAAAAnAAAAAAAAAABAAAAdJsAAAAAAAAAmwAAAAAAAAABAAAAYZoAAAAAAAAAmgAAAAAAAAABAAAAbJkAAAAAAAAAmQAAAAAAAAABAAAAIJgAAAAAAAAAmAAAAAAAAAABAAAAZZcAAAAAAAAAlwAAAAAAAAABAAAAa5YAAAAAAAAAlgAAAAAAAAABAAAAYZUAAAAAAAAAlQAAAAAAAAABAAAAbZQAAAAAAAAAlAAAAAAAAAABAAAAZZMAAAAAAAAAkwAAAAAAAAABAAAAcpIAAAAAAAAAkgAAAAAAAAABAAAAIJEAAAAAAAAAkQAAAAAAAAABAAAAb5AAAAAAAAAAkAAAAAAAAAABAAAAdI8AAAAAAAAAjwAAAAAAAAABAAAAII4AAAAAAAAAjgAAAAAAAAABAAAAZI0AAAAAAAAAjQAAAAAAAAABAAAAZYwAAAAAAAAAjAAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "rm"
					},
					"AgAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					5,
					"left_delete",
					null,
					"BQAAAI0AAAAAAAAAjQAAAAAAAAABAAAAbYwAAAAAAAAAjAAAAAAAAAABAAAAcosAAAAAAAAAiwAAAAAAAAABAAAAbooAAAAAAAAAigAAAAAAAAABAAAAIIkAAAAAAAAAiQAAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n//rem"
					},
					"BgAAAIkAAAAAAAAAigAAAAAAAAAAAAAAigAAAAAAAACLAAAAAAAAAAAAAACLAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAI8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAAI4AAAAAAAAAjgAAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "make"
					},
					"BAAAAI4AAAAAAAAAjwAAAAAAAAAAAAAAjwAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJEAAAAAAAAAAAAAAJEAAAAAAAAAkgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " leter"
					},
					"BgAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					3,
					"left_delete",
					null,
					"AwAAAJcAAAAAAAAAlwAAAAAAAAABAAAAcpYAAAAAAAAAlgAAAAAAAAABAAAAZZUAAAAAAAAAlQAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					2,
					"left_delete",
					null,
					"AgAAAJUAAAAAAAAAlQAAAAAAAAABAAAAYZQAAAAAAAAAlAAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "ater"
					},
					"BAAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAACWAAAAAAAAAJcAAAAAAAAAAAAAAJcAAAAAAAAAmAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " when"
					},
					"BQAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					4,
					"left_delete",
					null,
					"BAAAAJwAAAAAAAAAnAAAAAAAAAABAAAAbpsAAAAAAAAAmwAAAAAAAAABAAAAZZoAAAAAAAAAmgAAAAAAAAABAAAAaJkAAAAAAAAAmQAAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "basc"
					},
					"BAAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAH0AAAAAAAAAAAAAAH0AAAAAAAAAfgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"left_delete",
					null,
					"AQAAAH0AAAAAAAAAfQAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "ic"
					},
					"AgAAAH0AAAAAAAAAfgAAAAAAAAAAAAAAfgAAAAAAAAB/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "assets/ball.mtl",
			"settings":
			{
				"buffer_size": 51,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 289,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "This"
					},
					"BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAACQAAAB0aGlzIGlzIHByYWN0aWNlIGZvciB2dWxrYW4gYW5kIGdpdAoBAAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " pra"
					},
					"BAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAAwAAAAAAAAADAAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "actice"
					},
					"BgAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAABMAAAAAAAAAEwAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "project"
					},
					"BwAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " getting"
					},
					"CAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " grips"
					},
					"BgAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " how"
					},
					"BAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " vulkan"
					},
					"BwAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAAPwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " works,"
					},
					"BwAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " an"
					},
					"AwAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					2,
					"left_delete",
					null,
					"AgAAAEgAAAAAAAAASAAAAAAAAAABAAAAbkcAAAAAAAAARwAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "and"
					},
					"AwAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " also"
					},
					"BQAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAE0AAAAAAAAAAAAAAE0AAAAAAAAATgAAAAAAAAAAAAAATgAAAAAAAABPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " serves"
					},
					"BwAAAE8AAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABRAAAAAAAAAAAAAABRAAAAAAAAAFIAAAAAAAAAAAAAAFIAAAAAAAAAUwAAAAAAAAAAAAAAUwAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFUAAAAAAAAAAAAAAFUAAAAAAAAAVgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwAAAAAAAABPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAFsAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwAAAAAAAABbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					3,
					"left_delete",
					null,
					"AwAAAFwAAAAAAAAAXAAAAAAAAAABAAAAdFsAAAAAAAAAWwAAAAAAAAABAAAAIFoAAAAAAAAAWgAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "somewhere"
					},
					"CQAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAF0AAAAAAAAAAAAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAABfAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAABiAAAAAAAAAGMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgAAAAAAAABaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAGMAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABlAAAAAAAAAAAAAABlAAAAAAAAAGYAAAAAAAAAAAAAAGYAAAAAAAAAZwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwAAAAAAAABjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " me"
					},
					"AwAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAABpAAAAAAAAAGoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAGoAAAAAAAAAawAAAAAAAAAAAAAAawAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAG0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " experiment"
					},
					"CwAAAG0AAAAAAAAAbgAAAAAAAAAAAAAAbgAAAAAAAABvAAAAAAAAAAAAAABvAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAByAAAAAAAAAHMAAAAAAAAAAAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAB1AAAAAAAAAHYAAAAAAAAAAAAAAHYAAAAAAAAAdwAAAAAAAAAAAAAAdwAAAAAAAAB4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " different"
					},
					"CgAAAH0AAAAAAAAAfgAAAAAAAAAAAAAAfgAAAAAAAAB/AAAAAAAAAAAAAAB/AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAIgAAAAAAAAAiAAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "3d"
					},
					"AgAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " g"
					},
					"AgAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					4,
					"left_delete",
					null,
					"BAAAAIsAAAAAAAAAiwAAAAAAAAABAAAAZ4oAAAAAAAAAigAAAAAAAAABAAAAIIkAAAAAAAAAiQAAAAAAAAABAAAAZIgAAAAAAAAAiAAAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "gr"
					},
					"AgAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					2,
					"left_delete",
					null,
					"AgAAAIkAAAAAAAAAiQAAAAAAAAABAAAAcogAAAAAAAAAiAAAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "techin"
					},
					"BgAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					2,
					"left_delete",
					null,
					"AgAAAI0AAAAAAAAAjQAAAAAAAAABAAAAbowAAAAAAAAAjAAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "niques"
					},
					"BgAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAI8AAAAAAAAAAAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " such"
					},
					"BQAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " so"
					},
					"AwAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAJwAAAAAAAAAnAAAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "hadowmapping"
					},
					"DAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAChAAAAAAAAAAAAAAChAAAAAAAAAKIAAAAAAAAAAAAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAAAAAAAAACoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwAAAAAAAAArQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAAAAAAAAACsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					4,
					"left_delete",
					null,
					"BAAAAKwAAAAAAAAArAAAAAAAAAABAAAAIKsAAAAAAAAAqwAAAAAAAAABAAAAZKoAAAAAAAAAqgAAAAAAAAABAAAAbqkAAAAAAAAAqQAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAArQAAAAAAAACtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "shading"
					},
					"BwAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAI4AAAAAAAAAjwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI8AAAAAAAAAkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"left_delete",
					null,
					"AQAAALAAAAAAAAAAsAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAItA"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALAAAAAAAAAAsQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " so"
					},
					"AwAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAALQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " alot"
					},
					"BQAAALQAAAAAAAAAtQAAAAAAAAAAAAAAtQAAAAAAAAC2AAAAAAAAAAAAAAC2AAAAAAAAALcAAAAAAAAAAAAAALcAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAALkAAAAAAAAAugAAAAAAAAAAAAAAugAAAAAAAAC7AAAAAAAAAAAAAAC7AAAAAAAAALwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQAAAAAAAAC5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAALwAAAAAAAAAvQAAAAAAAAAAAAAAvQAAAAAAAAC+AAAAAAAAAAAAAAC+AAAAAAAAAL8AAAAAAAAAAAAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAAAAAAAAAC8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAMEAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADDAAAAAAAAAAAAAADDAAAAAAAAAMQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " very"
					},
					"BQAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " broken!"
					},
					"CAAAAMkAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAADLAAAAAAAAAAAAAADLAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADOAAAAAAAAAAAAAADOAAAAAAAAAM8AAAAAAAAAAAAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"left_delete",
					null,
					"AQAAANAAAAAAAAAA0AAAAAAAAAABAAAAIQ",
					"AQAAAAAAAAABAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAADSAAAAAAAAANMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAANMAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADVAAAAAAAAAAAAAADVAAAAAAAAANYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wAAAAAAAADTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " now,"
					},
					"BQAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANkAAAAAAAAAAAAAANkAAAAAAAAA2gAAAAAAAAAAAAAA2gAAAAAAAADbAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAANsAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADdAAAAAAAAAAAAAADdAAAAAAAAAN4AAAAAAAAAAAAAAN4AAAAAAAAA3wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wAAAAAAAADbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " ha"
					},
					"AwAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADhAAAAAAAAAAAAAADhAAAAAAAAAOIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wAAAAAAAADfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					2,
					"left_delete",
					null,
					"AgAAAOEAAAAAAAAA4QAAAAAAAAABAAAAYeAAAAAAAAAA4AAAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "ive"
					},
					"AwAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA4QAAAAAAAADiAAAAAAAAAAAAAADiAAAAAAAAAOMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AAAAAAAAADgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " had"
					},
					"BAAAAOMAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADlAAAAAAAAAAAAAADlAAAAAAAAAOYAAAAAAAAAAAAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wAAAAAAAADjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " no"
					},
					"AwAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAOoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " tiem"
					},
					"BQAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA6wAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAO0AAAAAAAAAAAAAAO0AAAAAAAAA7gAAAAAAAAAAAAAA7gAAAAAAAADvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gAAAAAAAADqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADxAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wAAAAAAAADvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					4,
					"left_delete",
					null,
					"BAAAAPAAAAAAAAAA8AAAAAAAAAABAAAAdO8AAAAAAAAA7wAAAAAAAAABAAAAIO4AAAAAAAAA7gAAAAAAAAABAAAAbe0AAAAAAAAA7QAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA8QAAAAAAAADxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "me"
					},
					"AgAAAO0AAAAAAAAA7gAAAAAAAAAAAAAA7gAAAAAAAADvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QAAAAAAAADtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADxAAAAAAAAAAAAAADxAAAAAAAAAPIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wAAAAAAAADvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " revisit"
					},
					"CAAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPUAAAAAAAAAAAAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA9gAAAAAAAAD3AAAAAAAAAAAAAAD3AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA+QAAAAAAAAD6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gAAAAAAAADyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAAPoAAAAAAAAA+wAAAAAAAAAAAAAA+wAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAP0AAAAAAAAAAAAAAP0AAAAAAAAA/gAAAAAAAAAAAAAA/gAAAAAAAAD/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gAAAAAAAAD6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " du"
					},
					"AwAAAP8AAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAABAQAAAAAAAAAAAAABAQAAAAAAAAIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wAAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAIBAAAAAAAAAwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"left_delete",
					null,
					"AQAAAAIBAAAAAAAAAgEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAAIBAAAAAAAAAwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAAMBAAAAAAAABAEAAAAAAAAAAAAABAEAAAAAAAAFAQAAAAAAAAAAAAAFAQAAAAAAAAYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " college."
					},
					"CQAAAAYBAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAkBAAAAAAAAAAAAAAkBAAAAAAAACgEAAAAAAAAAAAAACgEAAAAAAAALAQAAAAAAAAAAAAALAQAAAAAAAAwBAAAAAAAAAAAAAAwBAAAAAAAADQEAAAAAAAAAAAAADQEAAAAAAAAOAQAAAAAAAAAAAAAOAQAAAAAAAA8BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAADSAAAAAAAAANMAAAAAAAAAAAAAANMAAAAAAAAA1AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " very"
					},
					"BQAAANQAAAAAAAAA1QAAAAAAAAAAAAAA1QAAAAAAAADWAAAAAAAAAAAAAADWAAAAAAAAANcAAAAAAAAAAAAAANcAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " bad,"
					},
					"BQAAANkAAAAAAAAA2gAAAAAAAAAAAAAA2gAAAAAAAADbAAAAAAAAAAAAAADbAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAN4AAAAAAAAA3wAAAAAAAAAAAAAA3wAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOEAAAAAAAAAAAAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					2,
					"left_delete",
					null,
					"AgAAAO4AAAAAAAAA7gAAAAAAAAADAAAAYW5k7QAAAAAAAADtAAAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAA7gAAAAAAAADxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "the"
					},
					"BAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA2AAAAAAAAAAMAAABob3c2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " basics"
					},
					"BwAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAAPwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIAAAAAAAAAQwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"left_delete",
					null,
					"AQAAAEIAAAAAAAAAQgAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					2,
					"left_delete",
					null,
					"AgAAAEoAAAAAAAAASgAAAAAAAAAFAAAAd29ya3NJAAAAAAAAAEkAAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAASgAAAAAAAABPAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/engine.hpp",
			"settings":
			{
				"buffer_size": 6393,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Arithmetic"
			],
			[
				"package control list",
				"Package Control: List Packages"
			],
			[
				"package contro",
				"Package Control: Install Package"
			],
			[
				"packagecontrol install",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"package resor",
				"PackageResourceViewer: Open Resource"
			],
			[
				"install pack",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 74.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkan-practice-engine-scene-management",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkan-practice-engine-scene-management/assets",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkan-practice-engine-scene-management/include",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkan-practice-engine-scene-management/shaders",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkan-practice-engine-scene-management/src"
	],
	"file_history":
	[
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2 gitproject/include/CobertEngine.hpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/shaders/vertex.vert",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/shaders/frag_untex.frag",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2 gitproject/src/cobertengine.cpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/assets/cube.obj",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/assets/ball.obj",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/include/engine.hpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/shaders/frag.frag",
		"/home/coby/cplusplus/githubb/godot/godotfork/modules/gdscript/gdscript_compiler.cpp",
		"/home/coby/Documents/homework.py",
		"/media/coby/Main Storage/87D7AE7CB871",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/src/engine.cpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/src/main.cpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/src/notes.txt",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/assets/testasset.mtl",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/makefile",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/src/vulkancore.cpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/include/vulkancore.hpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/include/meshtools.hpp",
		"/home/coby/cplusplus/vulkanstuff/snooker/vulkanremade 3 - scene management/vulkan-practice-engine-2/shaders/frag.spv",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2 gitproject/shaders/frag.frag",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2 gitproject/shaders/vertex.vert",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/src/engine.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/include/engine.hpp",
		"/home/coby/cplusplus/terminalmesh/src/meshreader.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/shaders/frag.frag",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/shaders/vertex.vert",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/assets/cube.mtl",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/assets/cube.obj",
		"/home/coby/cplusplus/terminalmesh/include/meshreader.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/src/meshtools.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/src/cobertengine.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/EXAMPLES/cobertengine_beforeindices.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/src/vulkancore.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/include/vulkancore.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/src/main.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/include/EngineThree.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/shaders/vertex_pushconstant.vert",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/include/CobertEngine.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 3/src/cobertengine.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/assets/monker.obj",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/assets/pistol.obj",
		"/home/coby/Documents/amdprofiler/RadeonDeveloperToolSuite-2022-08-01-115/scripts/setup.sh",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/makefile",
		"/home/coby/Documents/amdprofiler/RadeonDeveloperToolSuite-2022-08-01-115/scripts/remove_shared_memory.sh",
		"/home/coby/Documents/amdprofiler/RadeonDeveloperToolSuite-2022-08-01-115/RadeonDeveloperService",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/shaders/vertex.vert",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/include/tiny_obj_loader.h",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/VulkanTest",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/assets/monker.mtl",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/include/stb_image.h",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/include/CobertEngine.hpp",
		"/home/coby/cplusplus/libarbiesd/VulkanMemoryAllocator-3.0.1/build/cmake_install.cmake",
		"/home/coby/cplusplus/libarbiesd/VulkanMemoryAllocator-3.0.1/build/Makefile",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/shaders/vertex2.vert",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/src/main.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade/include/vengine.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/EXAMPLES/venginexample.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanwebtutorial/shaders/vertex.vert",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade/src/main.cpp",
		"/var/log/syslog",
		"/home/coby/journalfile.log",
		"/var/crash/_usr_bin_latte-dock.1000.crash",
		"/var/crash/_usr_lib_x86_64-linux-gnu_libexec_drkonqi.1000.crash",
		"/home/coby/Downloads/19_vertex_buffer.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/include/vengine.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade 2/src/vengine.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade/EXAMPLES/EXAMPLE.cpp",
		"/home/coby/cplusplus/info",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade/makefile",
		"/home/coby/.local/share/multimc/instances/BTA.MultiMC.Updater/patches/customjar.json",
		"/home/coby/cplusplus/terminalmesh/include/vectorpoint.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade/res/vengine.hpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanwebtutorial/src/main.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade/shaders/frag.frag",
		"/home/coby/cplusplus/vulkanstuff/vulkanremade/shaders/vertex.vert",
		"/home/coby/Downloads/10_fixed_functions.cpp",
		"/home/coby/Downloads/15_hello_triangle.cpp",
		"/home/coby/Downloads/12_graphics_pipeline_complete.cpp",
		"/home/coby/Downloads/14_command_buffers.cpp",
		"/media/coby/Main Storage/Text File.txt",
		"/home/coby/Downloads/09_shader_modules.cpp",
		"/home/coby/Downloads/07_image_views.cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanwebtutorial/shaders/frag.frag",
		"/home/coby/cplusplus/vulkanstuff/vulkanwebtutorial/shaders/vertex.spv",
		"/home/coby/cplusplus/vulkanstuff/vulkanwebtutorial/makefile",
		"/home/coby/Downloads/05_window_surface.cpp",
		"/home/coby/.minecraft/resourcepacks/RedstonePack/assets/minecraft/sounds.json",
		"/home/coby/.minecraft/resourcepacks/RedstonePack/assets/minecraft/sounds/sounds.json",
		"/home/coby/Downloads/04_logical_device.cpp",
		"/home/coby/Downloads/04_logical_device(1).cpp",
		"/home/coby/cplusplus/vulkanstuff/vulkanwebtutorial/Untitled.sublime-project",
		"/home/coby/.minecraft/resourcepacks/RedstonePack/assets/minecraft/shaders/core/rendertype_text_intensity.fsh",
		"/home/coby/.minecraft/resourcepacks/RedstonePack/assets/minecraft/shaders/core/rendertype_text.fsh",
		"/home/coby/.minecraft/resourcepacks/RedstonePack/assets/minecraft/blockstates/redstone_wire.json",
		"/home/coby/.minecraft/resourcepacks/RedstonePack/assets/minecraft/models/block/redstone_power_level_15.json",
		"/home/coby/cplusplus/vulkantestproject/include/gamre.hpp",
		"/home/coby/cplusplus/vulkantestproject/res/gamre.hpp",
		"/home/coby/cplusplus/vulkantestproject/VulkanTest",
		"/home/coby/cplusplus/vulkantestproject/main.cpp",
		"/home/coby/cplusplus/vulkantestproject/src/main.cpp",
		"/home/coby/cplusplus/vulkantestproject/Untitled.sublime-project",
		"/home/coby/cplusplus/vulkantestproject/Untitled.sublime-workspace",
		"/home/coby/cplusplus/vulkantestproject/bin/debug/main",
		"/home/coby/cplusplus/consolegame/include/WindowHandler.hpp",
		"/home/coby/cplusplus/consolegame/src/windowhandler.cpp",
		"/home/coby/cplusplus/consolegame/src/Paddle.cpp",
		"/home/coby/cplusplus/consolegame/include/Paddle.hpp",
		"/home/coby/cplusplus/consolegame/src/gamehandler.cpp",
		"/home/coby/cplusplus/helloworld/include/GameHandler.hpp",
		"/home/coby/cplusplus/helloworld/include/RenderObject.hpp",
		"/home/coby/cplusplus/helloworld/src/windowhandler.cpp",
		"/home/coby/cplusplus/helloworld/include/WindowHandler.hpp",
		"/home/coby/cplusplus/helloworld/Untitled.sublime-project",
		"/A/Desktop/C++/projects/Untitled/Untitled.sublime-project",
		"/A/cshir/AppData/Roaming/Sublime Text 3/Packages/Default/exec.py",
		"/A/Music/MUSIC/spitfire/Spitfire Audio - LABS/Samples/LABS Soft Piano/LABS_GRAND_TOASTY_HALL_NORM_06.spitfire",
		"/A/Desktop/p5js/test/sketch.js",
		"/A/Desktop/p5js/empty-example/index.html",
		"/A/Desktop/p5js/test/index.html",
		"/A/cshir/Documents/ShareX/Screenshots/2021-08/tf2moment_Trim.mp4",
		"/A/cshir/Documents/Dev Assets/Roblox/Hedge/NEW TEST/weblet/untitled.blend",
		"/A/Music/MUSIC/spitfire/Spitfire Audio - LABS/Presets/LABS Soft Piano/v1.0.5/LABS_Soft_Piano.zpreset",
		"/A/Music/MUSIC/spitfire/Spitfire Audio - LABS/Samples/LABS Soft Piano/LABS_SOFTPIANO_PEDON_01.spitfire",
		"/A/Music/MUSIC/spitfire/Spitfire Audio - LABS/Samples/LABS Soft Piano/LABS_SOFT_PIANO.db",
		"/A/Music/MUSIC/spitfire/Spitfire Audio - LABS/Patches/LABS Soft Piano/v1.0.5/LABS_Soft_Piano.zmulti",
		"/A/cshir/AppData/Roaming/Spitfire Audio/Settings/lm.conf",
		"/A/cshir/AppData/Roaming/Spitfire Audio/Settings/Spitfire.properties"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"create_texture_from_allimage",
			"create_texture",
			"shit",
			"fuck",
			"shadow",
			"CreateShadowmap",
			"Create_New_Pipeline",
			"CreateGraphicsPipeline",
			"CreateSyncObjects",
			"CreateDescriptorSets",
			"CreateCommandpool",
			"CreateFramebuffer",
			"CreateRenderpass",
			"CreateSwapchain",
			"CreateAllocator",
			"todo",
			"shadowdraw",
			"depthAttachment",
			"colorAttachment",
			"attachmentdescription",
			"imagelayout::",
			"eshaderreadonlyoptimal",
			"create_allocated_image",
			"depthImage",
			"eDepthStencilAttachmentOptimal",
			"pipelineBarrier",
			"imagelayout::",
			"shaderread",
			"createFramebuffer",
			"InitShadowmap",
			"framebuffer",
			"renderpass_shadow",
			"renderpass",
			"FramebufferCreateInfo",
			"framebuffer",
			"shadowdraw",
			"next_swap_image",
			"swapchain",
			"getswapchain",
			"swapchainImages",
			"vk::image",
			"allocatedimage",
			"imageview",
			"commandbuffer_current",
			"pcommandbuffers",
			"pcommand",
			"pCommandBuffers",
			"pcommandbuffers",
			"shadowdraw",
			"WorldData",
			".submit",
			"queue.submit",
			"destroysampler",
			"destroy_allocated_image",
			"createSampler",
			"SamplerCreateInfo",
			"shadowmapSampler",
			"SamplerCreateInfo",
			"vk::sampler",
			"create_allocated_image",
			"eSampled",
			"create_allocated_image",
			"esampled",
			"InitShadowmap",
			"descriptorCount",
			"updatedes",
			"create_allocated_image",
			"InitShadowmap",
			"updateDescriptorSets",
			"InitShadowmap",
			"writedescriptorset",
			"writedescriptorsets",
			"vksubpassdepenb",
			"writedescriptorset",
			"target_layout",
			"pipelinelayout",
			"depthimage.imageview",
			"descriptorSetLayout",
			"Create_New_Pipeline",
			"target_layout",
			"descriptorSetLayout",
			"Create_New_Pipeline",
			"descriptorSetLayout_texture",
			"descriptorSetLayout",
			"Create_New_Pipeline",
			"target_layout",
			"CreateGraphicsPipeline",
			"descriptorSetLayout",
			"CreateGraphicsPipeline",
			"draw()",
			"descriptorSetLayout",
			"playout",
			"descriptorSetLayout_texture",
			"descriptor =",
			"Create_New_Pipeline",
			"pipelineLayout_textured",
			"binddescript",
			"descriptorSetLayout_texture",
			"binding",
			".descriptor",
			"descriptorSetLayout",
			"cameraBufferBinding",
			"binddescriptorset",
			"descriptorSetLayout_texture",
			"descriptorSetLayout",
			"descriptorSetLayout_texture",
			"descriptorsetlayoutbinding",
			"Create_New_Pipeline",
			"graphicspipelinecreate",
			"InitShadowmap",
			"descriptor",
			"descriptors",
			"pstages",
			"stages",
			"graphicspipelinecreateinfo",
			"shadowDependencies",
			"todo",
			"DescriptorImageInfo",
			"WorldData",
			"combinedi",
			"combined",
			"sampler",
			"Create_New_Pipeline",
			"pipelineLayout_textured",
			"bind",
			"binding",
			"Create_New_Pipeline",
			"shadowmapPipeline"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 169,
						"regions":
						{
						},
						"selection":
						[
							[
								169,
								169
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/engine.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58608,
						"regions":
						{
						},
						"selection":
						[
							[
								58260,
								58260
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 12835.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/meshtools.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3328,
						"regions":
						{
						},
						"selection":
						[
							[
								160,
								160
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "assets/ball.mtl",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 51,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 289,
						"regions":
						{
						},
						"selection":
						[
							[
								289,
								289
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "src/engine.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58608,
						"regions":
						{
						},
						"selection":
						[
							[
								50220,
								50220
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 30817.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "include/engine.hpp",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 6393,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2514.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 46.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.524785281646,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 278.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Debug Build 64bit",
	"project": "Untitled.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/cplusplus/vulkanstuff/vulkanremade 2 gitproject/Untitled.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 365.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
